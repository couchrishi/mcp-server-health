{
  "scan_metadata": {
    "timestamp": "2025-04-06T17:22:01.089736",
    "scan_duration_seconds": 128,
    "assessment_type": "all"
  },
  "repositories": [
    {
      "repo_url": "https://github.com/21st-dev/magic-mcp",
      "name": "21st.dev Magic",
      "container_security": {
        "base_image": {
          "name": "node:22.14.0-alpine",
          "provenance": "Official (Docker Hub)",
          "tag_type": "specific_version",
          "tag": "22.14.0-alpine",
          "tag_specificity": "High",
          "last_updated": "2025-02-15T07:40:00.760191Z",
          "age_days": 50,
          "freshness_rating": "Moderate",
          "runs_as_root": true,
          "user": "root"
        },
        "vulnerability_summary": {
          "critical_count": 0,
          "high_count": 0,
          "total_count": 0,
          "fixable_count": 0
        },
        "critical_vulnerabilities": [],
        "high_vulnerabilities": []
      },
      "api_security": {
        "overall_score": 0,
        "file_stats": {
          "total_files": 96,
          "server_files": 2,
          "route_files": 0,
          "auth_files": 0,
          "config_files": 3,
          "middleware_files": 0,
          "error_handling_files": 1,
          "input_validation_files": 1,
          "tls_files": 0
        },
        "authentication": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No authentication files found"
          ],
          "recommendations": [
            "Implement proper authentication"
          ]
        },
        "rate_limiting": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No rate limiting implementation found"
          ],
          "recommendations": [
            "Implement rate limiting to protect against abuse"
          ]
        },
        "input_validation": {
          "score": 9,
          "mechanism": "The code implements the Zod library, a powerful TypeScript-first schema declaration and validation library. It primarily uses **Schema Validation**. This involves defining expected data structures (schemas) with specific types and constraints, and then parsing input data against these schemas. Key validation types employed within this mechanism include:\n\n1.  **Type Checking:** Core to Zod, ensuring data conforms to expected JavaScript types (string, number, boolean, object, array, date, bigint, etc.). It uses `typeof` and `instanceof` checks internally.\n2.  **Format Validation:** Provides built-in checks for common string formats using regular expressions and specific logic (e.g., email, URL, UUID, CUID, ULID, IP address, datetime, Base64, JWT).\n3.  **Range and Length Checking:** Allows defining minimum/maximum values for numbers/bigints/dates, and minimum/maximum lengths (or exact lengths) for strings/arrays.\n4.  **Literal Validation:** Checks if the input is exactly equal to a predefined literal value (e.g., `z.literal('admin')`).\n5.  **Enum Validation:** Ensures input is one of a predefined set of string or number values.\n6.  **Structure Validation:** Validates the shape of objects (keys and value types), arrays (element types), tuples, maps, and sets.\n7.  **Custom Validation Logic:** Supports adding custom validation rules via `.refine()` and `.superRefine()`.\n8.  **Transformation/Sanitization (Limited):** Offers `.transform()` to modify data after successful validation, and specific methods like `.trim()`, `.toLowerCase()`, `.toUpperCase()`. Also includes `.coerce()` to attempt type conversion before validation (e.g., string to number). While transformation can be used for sanitization, Zod's primary focus is validation.",
          "findings": [
            "**Comprehensive Validation:** The library provides a very thorough set of tools for validating various data types, formats, ranges, and structures.",
            "**Strong Type Checking:** Type validation is a fundamental and robust aspect of the library.",
            "**Detailed Error Reporting:** Zod generates detailed error messages, including the path to the invalid data, expected type/format, and received type, which aids debugging.",
            "**Extensibility:** Custom validation logic can be easily added using refinement methods.",
            "**No Inherent SQL Injection Vulnerability:** The library itself does not interact with databases. It validates data *before* it might be used in a query. Proper use of Zod helps *prevent* SQLi by ensuring data types (e.g., ensuring an ID is numeric), but it does not replace the need for parameterized queries.",
            "**No Inherent XSS Vulnerability:** Zod validates input data structure and types but does *not* perform context-aware output encoding (e.g., for HTML). Validated data, if outputted directly without proper encoding/sanitization, can still lead to XSS. While `.transform()` *could* be used for sanitization, it's not its primary design goal and requires careful implementation.",
            "**No Inherent Command Injection Vulnerability:** Similar to SQLi, Zod validates data before it might be used in system commands. It can help by enforcing formats or character restrictions (e.g., via `.regex()`), but does not replace the need for using safe APIs and proper escaping when interacting with the shell.",
            "**Special Character Handling:** Zod primarily validates structure and format. It doesn't automatically escape special characters for specific output contexts (HTML, SQL, shell). Developers can use `.regex()` or `.refine()` to implement specific character allow/deny lists if needed for input validation.",
            "**Validation Completeness is User-Dependent:** The thoroughness of validation in any specific application depends entirely on how the developer *defines* the Zod schemas. The library provides the tools, but the developer must use them correctly and comprehensively.",
            "**Coercion Risks:** Using `.coerce()` can hide original input type issues or lead to unexpected behavior if not used carefully, although it's an intentional feature for flexibility."
          ],
          "recommendations": [
            "**Define Strict Schemas:** Utilize Zod to define strict schemas for all untrusted input sources (API requests, user forms, configuration files, etc.).",
            "**Leverage Specific Validators:** Use built-in format validators (`.email()`, `.url()`, `.uuid()`, etc.) instead of generic regex where possible for clarity and robustness.",
            "**Apply Constraints:** Always add necessary constraints like `.min()`, `.max()`, `.length()`, `.nonempty()` to schemas.",
            "**Use `.refine()` for Complex Business Logic:** Implement custom validation rules that go beyond basic type/format checks using `.refine()` or `.superRefine()`.",
            "**Combine with Output Encoding/Sanitization:** **Crucially**, remember that Zod is for *input validation*. Always use appropriate, context-aware output encoding (e.g., HTML entity encoding for web output) or sanitization libraries *after* validation to prevent XSS.",
            "**Use Parameterized Queries:** Always use prepared statements or parameterized queries when interacting with databases to prevent SQL injection, regardless of Zod validation.",
            "**Use Safe APIs for Commands:** Avoid constructing shell commands directly with validated input. Use safe APIs that handle argument separation properly to prevent command injection.",
            "**Be Cautious with `.transform()` for Sanitization:** While possible, prefer dedicated sanitization libraries if complex sanitization logic is required, rather than overloading Zod's transform function.",
            "**Be Mindful of `.coerce()`:** Understand the implications of type coercion and use it judiciously where the behavior is well-understood and intended."
          ]
        },
        "error_handling": {
          "score": 6,
          "mechanism": "Next.js Built-in Error Page Handler (`_error.js`)",
          "findings": [
            "The code snippet itself is minified Webpack/Next.js boilerplate for loading the `_error` page component.",
            "It represents the client-side bundle for Next.js's default error handling page (`pages/_error.js`). This acts as a global error handler for page-level errors (server-side rendering errors, client-side navigation errors not caught elsewhere).",
            "Information Disclosure Risk (Conditional): Next.js's default `_error.js` behaves differently based on the environment. In development mode, it displays detailed error messages and stack traces, which is a significant security risk if exposed publicly. In production mode (default for deployments), it shows a generic error message, mitigating this risk.",
            "Stack Traces Exposed (Conditional): Similar to information disclosure, stack traces are shown by default in development but hidden in production.",
            "Inconsistent Error Formats (Potential): While the default Next.js error page is consistent, if the application uses a custom `_error.js` component, there's a potential for inconsistent error message formats if not carefully implemented.",
            "Missing Error Logging (Potential): This client-side bundle doesn't inherently include robust error logging. While Next.js logs errors server-side to the console by default, comprehensive logging (e.g., to a dedicated logging service) often requires explicit implementation.",
            "Improper HTTP Status Codes (Unlikely with Default): The Next.js framework typically passes the correct HTTP status code (e.g., 404, 500) to the `_error.js` component, and the default implementation uses it correctly. Custom implementations *could* potentially handle status codes incorrectly.",
            "Lack of Graceful Degradation (Partial): The `_error.js` page *is* a form of graceful degradation, preventing a completely broken experience. However, the default page is quite basic. A lack of user-friendly guidance or recovery options on the error page could be considered a partial lack of graceful degradation from a UX perspective."
          ],
          "recommendations": [
            "Ensure the application is always run in `production` mode in staging and production environments to prevent the exposure of sensitive error details and stack traces.",
            "If using a custom `_error.js` component, ensure it does not leak sensitive information in the messages displayed to the user, regardless of the environment.",
            "Implement comprehensive server-side error logging that captures detailed error information (including stack traces) and sends it to a centralized logging system for monitoring and analysis. Consider client-side error reporting services as well.",
            "Review any custom `_error.js` implementation to ensure it correctly sets the HTTP response status code based on the error received.",
            "Consider enhancing the `_error.js` page (whether default or custom) to provide a more user-friendly experience, potentially including links to the homepage, a search bar, or contact information, while keeping error details generic for the user."
          ]
        },
        "https_tls": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No HTTPS/TLS implementation found"
          ],
          "recommendations": [
            "Implement HTTPS/TLS to secure communications"
          ]
        }
      },
      "mcp_security": {
        "overall_score": 2.4,
        "overall_risk_level": "high",
        "top_findings": [
          "[input_validation] No standard input validation libraries detected",
          "[input_validation] No input sanitization mechanisms detected",
          "[input_validation] No type checking detected",
          "[input_validation] No input length validation detected",
          "[input_validation] No error handling for invalid input detected"
        ],
        "top_recommendations": [
          "[input_validation] Implement JSON Schema, Pydantic, or another validation library",
          "[input_validation] Implement input sanitization for all user-provided data",
          "[input_validation] Implement type checking for function parameters and return values",
          "[input_validation] Implement input length validation to prevent buffer overflows and DoS attacks",
          "[input_validation] Implement proper error handling for invalid input"
        ],
        "detailed_results": {
          "tool_poisoning": {
            "score": 4,
            "risk_level": "medium",
            "findings": [
              "No mechanism to verify tool sources or integrity",
              "No tool isolation mechanisms detected"
            ],
            "recommendations": [
              "Implement tool signature verification or hash checking",
              "Implement sandboxing or containerization for tool execution"
            ]
          },
          "input_validation": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard input validation libraries detected",
              "No input sanitization mechanisms detected",
              "No type checking detected",
              "No input length validation detected",
              "No error handling for invalid input detected",
              "No input format validation detected"
            ],
            "recommendations": [
              "Implement JSON Schema, Pydantic, or another validation library",
              "Implement input sanitization for all user-provided data",
              "Implement type checking for function parameters and return values",
              "Implement input length validation to prevent buffer overflows and DoS attacks",
              "Implement proper error handling for invalid input",
              "Implement format validation using regular expressions or other methods"
            ]
          },
          "authentication": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard authentication libraries detected",
              "No evidence of HTTPS enforcement",
              "No secure storage mechanisms detected",
              "No CSRF protection detected",
              "No session management detected",
              "No multi-factor authentication support detected"
            ],
            "recommendations": [
              "Implement JWT, OAuth, or another standard authentication mechanism",
              "Enforce HTTPS for all connections",
              "Use proper hashing and encryption for sensitive data",
              "Implement CSRF protection",
              "Implement secure session management",
              "Consider implementing MFA for sensitive operations"
            ]
          },
          "data_exfiltration": {
            "score": 5,
            "risk_level": "medium",
            "findings": [
              "No evidence of data minimization or sanitization before processing",
              "No detection or notification mechanisms for suspicious activities"
            ],
            "recommendations": [
              "Implement data minimization to reduce sensitive data exposure",
              "Implement monitoring and alerting for suspicious data access patterns"
            ]
          },
          "dependency_security": {
            "score": 3,
            "risk_level": "medium",
            "findings": [
              "No dependency lock files found",
              "No dependency scanning tools detected",
              "No license file found"
            ],
            "recommendations": [
              "Use lock files to pin dependency versions",
              "Implement Dependabot, Snyk, or another dependency scanning tool",
              "Add a license file and ensure all dependencies have compatible licenses"
            ]
          }
        }
      }
    },
    {
      "repo_url": "https://github.com/Simon-Kansara/ableton-live-mcp-server",
      "name": "Ableton Live",
      "container_security": {
        "base_image": {
          "name": "python:3.10",
          "provenance": "Official (Docker Hub)",
          "tag_type": "specific_version",
          "tag": "3.10",
          "tag_specificity": "Medium",
          "last_updated": "2025-03-19T00:06:38.395952Z",
          "age_days": 18,
          "freshness_rating": "Recent",
          "runs_as_root": true,
          "user": "root"
        },
        "vulnerability_summary": {
          "critical_count": 5,
          "high_count": 100,
          "total_count": 105,
          "fixable_count": 8
        },
        "critical_vulnerabilities": [
          {
            "id": "CVE-2023-6879",
            "package": "libaom3",
            "installed_version": "3.6.0-1+deb12u1",
            "fixed_version": null,
            "title": "aom: heap-buffer-overflow on frame size change",
            "description": "Increasing the resolution of video frames, while performing a multi-threaded encode, can result in a heap overflow in av1_loop_restoration_dealloc().",
            "fix_available": false
          },
          {
            "id": "CVE-2023-5841",
            "package": "libopenexr-3-1-30",
            "installed_version": "3.1.5-5",
            "fixed_version": null,
            "title": "OpenEXR: Heap Overflow in Scanline Deep Data Parsing",
            "description": "Due to a failure in validating the number of scanline samples of a OpenEXR file containing deep scanline data, Academy Software Foundation OpenEX\u00a0image parsing library version 3.2.1 and prior is susceptible to a heap-based buffer overflow vulnerability. This issue was resolved as of versions\u00a0v3.2.2 and v3.1.12 of the affected library.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-5841",
            "package": "libopenexr-dev",
            "installed_version": "3.1.5-5",
            "fixed_version": null,
            "title": "OpenEXR: Heap Overflow in Scanline Deep Data Parsing",
            "description": "Due to a failure in validating the number of scanline samples of a OpenEXR file containing deep scanline data, Academy Software Foundation OpenEX\u00a0image parsing library version 3.2.1 and prior is susceptible to a heap-based buffer overflow vulnerability. This issue was resolved as of versions\u00a0v3.2.2 and v3.1.12 of the affected library.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-45853",
            "package": "zlib1g",
            "installed_version": "1:1.2.13.dfsg-1",
            "fixed_version": null,
            "title": "zlib: integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_6",
            "description": "MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename, comment, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version, and exposes the applicable MiniZip code through its compress API.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-45853",
            "package": "zlib1g-dev",
            "installed_version": "1:1.2.13.dfsg-1",
            "fixed_version": null,
            "title": "zlib: integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_6",
            "description": "MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename, comment, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version, and exposes the applicable MiniZip code through its compress API.",
            "fix_available": false
          }
        ],
        "high_vulnerabilities": [
          {
            "id": "CVE-2023-39616",
            "package": "libaom3",
            "installed_version": "3.6.0-1+deb12u1",
            "fixed_version": null,
            "title": "AOMedia v3.0.0 to v3.5.0 was discovered to contain an invalid read mem ...",
            "description": "AOMedia v3.0.0 to v3.5.0 was discovered to contain an invalid read memory access via the component assign_frame_buffer_p in av1/common/av1_common_int.h.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-44431",
            "package": "libbluetooth-dev",
            "installed_version": "5.66-1+deb12u2",
            "fixed_version": null,
            "title": "bluez: AVRCP stack-based buffer overflow remote code execution vulnerability",
            "description": "BlueZ Audio Profile AVRCP Stack-based Buffer Overflow Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code via Bluetooth on affected installations of BlueZ. User interaction is required to exploit this vulnerability in that the target must connect to a malicious device.\n\nThe specific flaw exists within the handling of the AVRCP protocol. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to execute code in the context of root. Was ZDI-CAN-19909.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-51596",
            "package": "libbluetooth-dev",
            "installed_version": "5.66-1+deb12u2",
            "fixed_version": null,
            "title": "bluez: phone book access profile heap-based buffer overflow remote code execution vulnerability",
            "description": "BlueZ Phone Book Access Profile Heap-based Buffer Overflow Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of BlueZ. User interaction is required to exploit this vulnerability in that the target must connect to a malicious Bluetooth device.\n\nThe specific flaw exists within the handling of the Phone Book Access profile. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length heap-based buffer. An attacker can leverage this vulnerability to execute code in the context of root. Was ZDI-CAN-20939.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-44431",
            "package": "libbluetooth3",
            "installed_version": "5.66-1+deb12u2",
            "fixed_version": null,
            "title": "bluez: AVRCP stack-based buffer overflow remote code execution vulnerability",
            "description": "BlueZ Audio Profile AVRCP Stack-based Buffer Overflow Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code via Bluetooth on affected installations of BlueZ. User interaction is required to exploit this vulnerability in that the target must connect to a malicious device.\n\nThe specific flaw exists within the handling of the AVRCP protocol. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to execute code in the context of root. Was ZDI-CAN-19909.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-51596",
            "package": "libbluetooth3",
            "installed_version": "5.66-1+deb12u2",
            "fixed_version": null,
            "title": "bluez: phone book access profile heap-based buffer overflow remote code execution vulnerability",
            "description": "BlueZ Phone Book Access Profile Heap-based Buffer Overflow Remote Code Execution Vulnerability. This vulnerability allows network-adjacent attackers to execute arbitrary code on affected installations of BlueZ. User interaction is required to exploit this vulnerability in that the target must connect to a malicious Bluetooth device.\n\nThe specific flaw exists within the handling of the Phone Book Access profile. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length heap-based buffer. An attacker can leverage this vulnerability to execute code in the context of root. Was ZDI-CAN-20939.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52425",
            "package": "libexpat1",
            "installed_version": "2.5.0-1+deb12u1",
            "fixed_version": null,
            "title": "expat: parsing large tokens can trigger a denial of service",
            "description": "libexpat through 2.5.0 allows a denial of service (resource consumption) because many full reparsings are required in the case of a large token for which multiple buffer fills are needed.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-8176",
            "package": "libexpat1",
            "installed_version": "2.5.0-1+deb12u1",
            "fixed_version": null,
            "title": "libexpat: expat: Improper Restriction of XML Entity Expansion Depth in libexpat",
            "description": "A stack overflow vulnerability exists in the libexpat library due to the way it handles recursive entity expansion in XML documents. When parsing an XML document with deeply nested entity references, libexpat can be forced to recurse indefinitely, exhausting the stack space and causing a crash. This issue could lead to denial of service (DoS) or, in some cases, exploitable memory corruption, depending on the environment and library usage.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52425",
            "package": "libexpat1-dev",
            "installed_version": "2.5.0-1+deb12u1",
            "fixed_version": null,
            "title": "expat: parsing large tokens can trigger a denial of service",
            "description": "libexpat through 2.5.0 allows a denial of service (resource consumption) because many full reparsings are required in the case of a large token for which multiple buffer fills are needed.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-8176",
            "package": "libexpat1-dev",
            "installed_version": "2.5.0-1+deb12u1",
            "fixed_version": null,
            "title": "libexpat: expat: Improper Restriction of XML Entity Expansion Depth in libexpat",
            "description": "A stack overflow vulnerability exists in the libexpat library due to the way it handles recursive entity expansion in XML documents. When parsing an XML document with deeply nested entity references, libexpat can be forced to recurse indefinitely, exhausting the stack space and causing a crash. This issue could lead to denial of service (DoS) or, in some cases, exploitable memory corruption, depending on the environment and library usage.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-25193",
            "package": "libharfbuzz0b",
            "installed_version": "6.0.0+dfsg-3",
            "fixed_version": null,
            "title": "harfbuzz: allows attackers to trigger O(n^2) growth via consecutive marks",
            "description": "hb-ot-layout-gsubgpos.hh in HarfBuzz through 6.0.0 allows attackers to trigger O(n^2) growth via consecutive marks during the process of looking back for base glyphs when attaching marks.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-2953",
            "package": "libldap-2.5-0",
            "installed_version": "2.5.13+dfsg-5",
            "fixed_version": null,
            "title": "openldap: null pointer dereference in  ber_memalloc_x  function",
            "description": "A vulnerability was found in openldap. This security flaw causes a null pointer dereference in ber_memalloc_x() function.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-31115",
            "package": "liblzma-dev",
            "installed_version": "5.4.1-0.2",
            "fixed_version": "5.4.1-1",
            "title": "xz: XZ has a heap-use-after-free bug in threaded .xz decoder",
            "description": "XZ Utils provide a general-purpose data-compression library plus command-line tools. In XZ Utils 5.3.3alpha to 5.8.0, the multithreaded .xz decoder in liblzma has a bug where invalid input can at least result in a crash. The effects include heap use after free and writing to an address based on the null pointer plus an offset. Applications and libraries that use the lzma_stream_decoder_mt function are affected. The bug has been fixed in XZ Utils 5.8.1, and the fix has been committed to the v5.4, v5.6, v5.8, and master branches in the xz Git repository. No new release packages will be made from the old stable branches, but a standalone patch is available that applies to all affected releases.",
            "fix_available": true
          },
          {
            "id": "CVE-2025-31115",
            "package": "liblzma5",
            "installed_version": "5.4.1-0.2",
            "fixed_version": "5.4.1-1",
            "title": "xz: XZ has a heap-use-after-free bug in threaded .xz decoder",
            "description": "XZ Utils provide a general-purpose data-compression library plus command-line tools. In XZ Utils 5.3.3alpha to 5.8.0, the multithreaded .xz decoder in liblzma has a bug where invalid input can at least result in a crash. The effects include heap use after free and writing to an address based on the null pointer plus an offset. Applications and libraries that use the lzma_stream_decoder_mt function are affected. The bug has been fixed in XZ Utils 5.8.1, and the fix has been committed to the v5.4, v5.6, v5.8, and master branches in the xz Git repository. No new release packages will be made from the old stable branches, but a standalone patch is available that applies to all affected releases.",
            "fix_available": true
          },
          {
            "id": "CVE-2023-31484",
            "package": "libperl5.36",
            "installed_version": "5.36.0-7+deb12u1",
            "fixed_version": null,
            "title": "perl: CPAN.pm does not verify TLS certificates when downloading distributions over HTTPS",
            "description": "CPAN.pm before 2.35 does not verify TLS certificates when downloading distributions over HTTPS.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52355",
            "package": "libtiff-dev",
            "installed_version": "4.5.0-6+deb12u2",
            "fixed_version": null,
            "title": "libtiff: TIFFRasterScanlineSize64 produce too-big size and could cause OOM",
            "description": "An out-of-memory flaw was found in libtiff that could be triggered by passing a crafted tiff file to the TIFFRasterScanlineSize64() API. This flaw allows a remote attacker to cause a denial of service via a crafted input with a size smaller than 379 KB.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52355",
            "package": "libtiff6",
            "installed_version": "4.5.0-6+deb12u2",
            "fixed_version": null,
            "title": "libtiff: TIFFRasterScanlineSize64 produce too-big size and could cause OOM",
            "description": "An out-of-memory flaw was found in libtiff that could be triggered by passing a crafted tiff file to the TIFFRasterScanlineSize64() API. This flaw allows a remote attacker to cause a denial of service via a crafted input with a size smaller than 379 KB.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52355",
            "package": "libtiffxx6",
            "installed_version": "4.5.0-6+deb12u2",
            "fixed_version": null,
            "title": "libtiff: TIFFRasterScanlineSize64 produce too-big size and could cause OOM",
            "description": "An out-of-memory flaw was found in libtiff that could be triggered by passing a crafted tiff file to the TIFFRasterScanlineSize64() API. This flaw allows a remote attacker to cause a denial of service via a crafted input with a size smaller than 379 KB.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-25062",
            "package": "libxml2",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: use-after-free in XMLReader",
            "description": "An issue was discovered in libxml2 before 2.11.7 and 2.12.x before 2.12.5. When using the XML Reader interface with DTD validation and XInclude expansion enabled, processing crafted XML documents can lead to an xmlValidatePopElement use-after-free.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-56171",
            "package": "libxml2",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: Use-After-Free in libxml2",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a use-after-free in xmlSchemaIDCFillNodeTables and xmlSchemaBubbleIDCNodeTables in xmlschemas.c. To exploit this, a crafted XML document must be validated against an XML schema with certain identity constraints, or a crafted XML schema must be used.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-24928",
            "package": "libxml2",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: Stack-based buffer overflow in xmlSnprintfElements of libxml2",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a stack-based buffer overflow in xmlSnprintfElements in valid.c. To exploit this, DTD validation must occur for an untrusted document or untrusted DTD. NOTE: this is similar to CVE-2017-9047.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-27113",
            "package": "libxml2",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: NULL Pointer Dereference in libxml2 xmlPatMatch",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a NULL pointer dereference in xmlPatMatch in pattern.c.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-25062",
            "package": "libxml2-dev",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: use-after-free in XMLReader",
            "description": "An issue was discovered in libxml2 before 2.11.7 and 2.12.x before 2.12.5. When using the XML Reader interface with DTD validation and XInclude expansion enabled, processing crafted XML documents can lead to an xmlValidatePopElement use-after-free.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-56171",
            "package": "libxml2-dev",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: Use-After-Free in libxml2",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a use-after-free in xmlSchemaIDCFillNodeTables and xmlSchemaBubbleIDCNodeTables in xmlschemas.c. To exploit this, a crafted XML document must be validated against an XML schema with certain identity constraints, or a crafted XML schema must be used.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-24928",
            "package": "libxml2-dev",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: Stack-based buffer overflow in xmlSnprintfElements of libxml2",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a stack-based buffer overflow in xmlSnprintfElements in valid.c. To exploit this, DTD validation must occur for an untrusted document or untrusted DTD. NOTE: this is similar to CVE-2017-9047.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-27113",
            "package": "libxml2-dev",
            "installed_version": "2.9.14+dfsg-1.3~deb12u1",
            "fixed_version": null,
            "title": "libxml2: NULL Pointer Dereference in libxml2 xmlPatMatch",
            "description": "libxml2 before 2.12.10 and 2.13.x before 2.13.6 has a NULL pointer dereference in xmlPatMatch in pattern.c.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-55549",
            "package": "libxslt1-dev",
            "installed_version": "1.1.35-1",
            "fixed_version": "1.1.35-1+deb12u1",
            "title": "libxslt: Use-After-Free in libxslt (xsltGetInheritedNsList)",
            "description": "xsltGetInheritedNsList in libxslt before 1.1.43 has a use-after-free issue related to exclusion of result prefixes.",
            "fix_available": true
          },
          {
            "id": "CVE-2025-24855",
            "package": "libxslt1-dev",
            "installed_version": "1.1.35-1",
            "fixed_version": "1.1.35-1+deb12u1",
            "title": "libxslt: Use-After-Free in libxslt numbers.c",
            "description": "numbers.c in libxslt before 1.1.43 has a use-after-free because, in nested XPath evaluations, an XPath context node can be modified but never restored. This is related to xsltNumberFormatGetValue, xsltEvalXPathPredicate, xsltEvalXPathStringNs, and xsltComputeSortResultInternal.",
            "fix_available": true
          },
          {
            "id": "CVE-2024-55549",
            "package": "libxslt1.1",
            "installed_version": "1.1.35-1",
            "fixed_version": "1.1.35-1+deb12u1",
            "title": "libxslt: Use-After-Free in libxslt (xsltGetInheritedNsList)",
            "description": "xsltGetInheritedNsList in libxslt before 1.1.43 has a use-after-free issue related to exclusion of result prefixes.",
            "fix_available": true
          },
          {
            "id": "CVE-2025-24855",
            "package": "libxslt1.1",
            "installed_version": "1.1.35-1",
            "fixed_version": "1.1.35-1+deb12u1",
            "title": "libxslt: Use-After-Free in libxslt numbers.c",
            "description": "numbers.c in libxslt before 1.1.43 has a use-after-free because, in nested XPath evaluations, an XPath context node can be modified but never restored. This is related to xsltNumberFormatGetValue, xsltEvalXPathPredicate, xsltEvalXPathStringNs, and xsltComputeSortResultInternal.",
            "fix_available": true
          },
          {
            "id": "CVE-2013-7445",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: memory exhaustion via crafted Graphics Execution Manager (GEM) objects",
            "description": "The Direct Rendering Manager (DRM) subsystem in the Linux kernel through 4.x mishandles requests for Graphics Execution Manager (GEM) objects, which allows context-dependent attackers to cause a denial of service (memory consumption) via an application that processes graphics data, as demonstrated by JavaScript code that creates many CANVAS elements for rendering by Chrome or Firefox.",
            "fix_available": false
          },
          {
            "id": "CVE-2019-19449",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: mounting a crafted f2fs filesystem image can lead to slab-out-of-bounds read access in f2fs_build_segment_manager in fs/f2fs/segment.c",
            "description": "In the Linux kernel 5.0.21, mounting a crafted f2fs filesystem image can lead to slab-out-of-bounds read access in f2fs_build_segment_manager in fs/f2fs/segment.c, related to init_min_max_mtime in fs/f2fs/segment.c (because the second argument to get_seg_entry is not validated).",
            "fix_available": false
          },
          {
            "id": "CVE-2019-19814",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: out-of-bounds write in __remove_dirty_segment in fs/f2fs/segment.c",
            "description": "In the Linux kernel 5.0.21, mounting a crafted f2fs filesystem image can cause __remove_dirty_segment slab-out-of-bounds write access because an array is bounded by the number of dirty types (8) but the array index can exceed this.",
            "fix_available": false
          },
          {
            "id": "CVE-2021-3847",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: low-privileged user privileges escalation",
            "description": "An unauthorized access to the execution of the setuid file with capabilities flaw in the Linux kernel OverlayFS subsystem was found in the way user copying a capable file from a nosuid mount into another mount. A local user could use this flaw to escalate their privileges on the system.",
            "fix_available": false
          },
          {
            "id": "CVE-2021-3864",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: descendant's dumpable setting with certain SUID binaries",
            "description": "A flaw was found in the way the dumpable flag setting was handled when certain SUID binaries executed its descendants. The prerequisite is a SUID binary that sets real UID equal to effective UID, and real GID equal to effective GID. The descendant will then have a dumpable value set to 1. As a result, if the descendant process crashes and core_pattern is set to a relative value, its core dump is stored in the current directory with uid:gid permissions. An unprivileged local user with eligible root SUID binary could use this flaw to place core dumps into root-owned directories, potentially resulting in escalation of privileges.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52452",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: bpf: Fix accesses to uninit stack slots",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix accesses to uninit stack slots\n\nPrivileged programs are supposed to be able to read uninitialized stack\nmemory (ever since 6715df8d5) but, before this patch, these accesses\nwere permitted inconsistently. In particular, accesses were permitted\nabove state->allocated_stack, but not below it. In other words, if the\nstack was already \"large enough\", the access was permitted, but\notherwise the access was rejected instead of being allowed to \"grow the\nstack\". This undesired rejection was happening in two places:\n- in check_stack_slot_within_bounds()\n- in check_stack_range_initialized()\nThis patch arranges for these accesses to be permitted. A bunch of tests\nthat were relying on the old rejection had to change; all of them were\nchanged to add also run unprivileged, in which case the old behavior\npersists. One tests couldn't be updated - global_func16 - because it\ncan't run unprivileged for other reasons.\n\nThis patch also fixes the tracking of the stack size for variable-offset\nreads. This second fix is bundled in the same commit as the first one\nbecause they're inter-related. Before this patch, writes to the stack\nusing registers containing a variable offset (as opposed to registers\nwith fixed, known values) were not properly contributing to the\nfunction's needed stack size. As a result, it was possible for a program\nto verify, but then to attempt to read out-of-bounds data at runtime\nbecause a too small stack had been allocated for it.\n\nEach function tracks the size of the stack it needs in\nbpf_subprog_info.stack_depth, which is maintained by\nupdate_stack_depth(). For regular memory accesses, check_mem_access()\nwas calling update_state_depth() but it was passing in only the fixed\npart of the offset register, ignoring the variable offset. This was\nincorrect; the minimum possible value of that register should be used\ninstead.\n\nThis tracking is now fixed by centralizing the tracking of stack size in\ngrow_stack_state(), and by lifting the calls to grow_stack_state() to\ncheck_stack_access_within_bounds() as suggested by Andrii. The code is\nnow simpler and more convincingly tracks the correct maximum stack size.\ncheck_stack_range_initialized() can now rely on enough stack having been\nallocated for the access; this helps with the fix for the first issue.\n\nA few tests were changed to also check the stack depth computation. The\none that fails without this patch is verifier_var_off:stack_write_priv_vs_unpriv.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52586",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/msm/dpu: Add mutex lock in control vblank irq",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/msm/dpu: Add mutex lock in control vblank irq\n\nAdd a mutex lock to control vblank irq to synchronize vblank\nenable/disable operations happening from different threads to prevent\nrace conditions while registering/unregistering the vblank irq callback.\n\nv4: -Removed vblank_ctl_lock from dpu_encoder_virt, so it is only a\n    parameter of dpu_encoder_phys.\n    -Switch from atomic refcnt to a simple int counter as mutex has\n    now been added\nv3: Mistakenly did not change wording in last version. It is done now.\nv2: Slightly changed wording of commit message\n\nPatchwork: https://patchwork.freedesktop.org/patch/571854/",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52624",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Wake DMCUB before executing GPINT commands",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Wake DMCUB before executing GPINT commands\n\n[Why]\nDMCUB can be in idle when we attempt to interface with the HW through\nthe GPINT mailbox resulting in a system hang.\n\n[How]\nAdd dc_wake_and_execute_gpint() to wrap the wake, execute, sleep\nsequence.\n\nIf the GPINT executes successfully then DMCUB will be put back into\nsleep after the optional response is returned.\n\nIt functions similar to the inbox command interface.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-52751",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: smb: client: fix use-after-free in smb2_query_info_compound()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsmb: client: fix use-after-free in smb2_query_info_compound()\n\nThe following UAF was triggered when running fstests generic/072 with\nKASAN enabled against Windows Server 2022 and mount options\n'multichannel,max_channels=2,vers=3.1.1,mfsymlinks,noperm'\n\n  BUG: KASAN: slab-use-after-free in smb2_query_info_compound+0x423/0x6d0 [cifs]\n  Read of size 8 at addr ffff888014941048 by task xfs_io/27534\n\n  CPU: 0 PID: 27534 Comm: xfs_io Not tainted 6.6.0-rc7 #1\n  Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS\n  rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014\n  Call Trace:\n   dump_stack_lvl+0x4a/0x80\n   print_report+0xcf/0x650\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? __phys_addr+0x46/0x90\n   kasan_report+0xda/0x110\n   ? smb2_query_info_compound+0x423/0x6d0 [cifs]\n   ? smb2_query_info_compound+0x423/0x6d0 [cifs]\n   smb2_query_info_compound+0x423/0x6d0 [cifs]\n   ? __pfx_smb2_query_info_compound+0x10/0x10 [cifs]\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? __stack_depot_save+0x39/0x480\n   ? kasan_save_stack+0x33/0x60\n   ? kasan_set_track+0x25/0x30\n   ? ____kasan_slab_free+0x126/0x170\n   smb2_queryfs+0xc2/0x2c0 [cifs]\n   ? __pfx_smb2_queryfs+0x10/0x10 [cifs]\n   ? __pfx___lock_acquire+0x10/0x10\n   smb311_queryfs+0x210/0x220 [cifs]\n   ? __pfx_smb311_queryfs+0x10/0x10 [cifs]\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? __lock_acquire+0x480/0x26c0\n   ? lock_release+0x1ed/0x640\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? do_raw_spin_unlock+0x9b/0x100\n   cifs_statfs+0x18c/0x4b0 [cifs]\n   statfs_by_dentry+0x9b/0xf0\n   fd_statfs+0x4e/0xb0\n   __do_sys_fstatfs+0x7f/0xe0\n   ? __pfx___do_sys_fstatfs+0x10/0x10\n   ? srso_alias_return_thunk+0x5/0x7f\n   ? lockdep_hardirqs_on_prepare+0x136/0x200\n   ? srso_alias_return_thunk+0x5/0x7f\n   do_syscall_64+0x3f/0x90\n   entry_SYSCALL_64_after_hwframe+0x6e/0xd8\n\n  Allocated by task 27534:\n   kasan_save_stack+0x33/0x60\n   kasan_set_track+0x25/0x30\n   __kasan_kmalloc+0x8f/0xa0\n   open_cached_dir+0x71b/0x1240 [cifs]\n   smb2_query_info_compound+0x5c3/0x6d0 [cifs]\n   smb2_queryfs+0xc2/0x2c0 [cifs]\n   smb311_queryfs+0x210/0x220 [cifs]\n   cifs_statfs+0x18c/0x4b0 [cifs]\n   statfs_by_dentry+0x9b/0xf0\n   fd_statfs+0x4e/0xb0\n   __do_sys_fstatfs+0x7f/0xe0\n   do_syscall_64+0x3f/0x90\n   entry_SYSCALL_64_after_hwframe+0x6e/0xd8\n\n  Freed by task 27534:\n   kasan_save_stack+0x33/0x60\n   kasan_set_track+0x25/0x30\n   kasan_save_free_info+0x2b/0x50\n   ____kasan_slab_free+0x126/0x170\n   slab_free_freelist_hook+0xd0/0x1e0\n   __kmem_cache_free+0x9d/0x1b0\n   open_cached_dir+0xff5/0x1240 [cifs]\n   smb2_query_info_compound+0x5c3/0x6d0 [cifs]\n   smb2_queryfs+0xc2/0x2c0 [cifs]\n\nThis is a race between open_cached_dir() and cached_dir_lease_break()\nwhere the cache entry for the open directory handle receives a lease\nbreak while creating it.  And before returning from open_cached_dir(),\nwe put the last reference of the new @cfid because of\n!@cfid->has_lease.\n\nBesides the UAF, while running xfstests a lot of missed lease breaks\nhave been noticed in tests that run several concurrent statfs(2) calls\non those cached fids\n\n  CIFS: VFS: \\\\w22-root1.gandalf.test No task to wake, unknown frame...\n  CIFS: VFS: \\\\w22-root1.gandalf.test Cmd: 18 Err: 0x0 Flags: 0x1...\n  CIFS: VFS: \\\\w22-root1.gandalf.test smb buf 00000000715bfe83 len 108\n  CIFS: VFS: Dump pending requests:\n  CIFS: VFS: \\\\w22-root1.gandalf.test No task to wake, unknown frame...\n  CIFS: VFS: \\\\w22-root1.gandalf.test Cmd: 18 Err: 0x0 Flags: 0x1...\n  CIFS: VFS: \\\\w22-root1.gandalf.test smb buf 000000005aa7316e len 108\n  ...\n\nTo fix both, in open_cached_dir() ensure that @cfid->has_lease is set\nright before sending out compounded request so that any potential\nlease break will be get processed by demultiplex thread while we're\nstill caching @cfid.  And, if open failed for some reason, re-check\n@cfid->has_lease to decide whether or not put lease reference.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-21803",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: bluetooth: use-after-free vulnerability in af_bluetooth.c",
            "description": "Use After Free vulnerability in Linux Linux kernel kernel on Linux, x86, ARM (bluetooth modules) allows Local Execution of Code. This vulnerability is associated with program files https://gitee.Com/anolis/cloud-kernel/blob/devel-5.10/net/bluetooth/af_bluetooth.C.\n\nThis issue affects Linux kernel: from v2.6.12-rc2 before v6.8-rc1.\n\n",
            "fix_available": false
          },
          {
            "id": "CVE-2024-25742",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "hw: amd: Instruction raise #VC exception at exit",
            "description": "In the Linux kernel before 6.9, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handler. This affects AMD SEV-SNP and AMD SEV-ES.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-25743",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "hw: amd: Instruction raise #VC exception at exit",
            "description": "In the Linux kernel through 6.9, an untrusted hypervisor can inject virtual interrupts 0 and 14 at any point in time and can trigger the SIGFPE signal handler in userspace applications. This affects AMD SEV-SNP and AMD SEV-ES.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26669",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: net/sched: flower: Fix chain template offload",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/sched: flower: Fix chain template offload\n\nWhen a qdisc is deleted from a net device the stack instructs the\nunderlying driver to remove its flow offload callback from the\nassociated filter block using the 'FLOW_BLOCK_UNBIND' command. The stack\nthen continues to replay the removal of the filters in the block for\nthis driver by iterating over the chains in the block and invoking the\n'reoffload' operation of the classifier being used. In turn, the\nclassifier in its 'reoffload' operation prepares and emits a\n'FLOW_CLS_DESTROY' command for each filter.\n\nHowever, the stack does not do the same for chain templates and the\nunderlying driver never receives a 'FLOW_CLS_TMPLT_DESTROY' command when\na qdisc is deleted. This results in a memory leak [1] which can be\nreproduced using [2].\n\nFix by introducing a 'tmplt_reoffload' operation and have the stack\ninvoke it with the appropriate arguments as part of the replay.\nImplement the operation in the sole classifier that supports chain\ntemplates (flower) by emitting the 'FLOW_CLS_TMPLT_{CREATE,DESTROY}'\ncommand based on whether a flow offload callback is being bound to a\nfilter block or being unbound from one.\n\nAs far as I can tell, the issue happens since cited commit which\nreordered tcf_block_offload_unbind() before tcf_block_flush_all_chains()\nin __tcf_block_put(). The order cannot be reversed as the filter block\nis expected to be freed after flushing all the chains.\n\n[1]\nunreferenced object 0xffff888107e28800 (size 2048):\n  comm \"tc\", pid 1079, jiffies 4294958525 (age 3074.287s)\n  hex dump (first 32 bytes):\n    b1 a6 7c 11 81 88 ff ff e0 5b b3 10 81 88 ff ff  ..|......[......\n    01 00 00 00 00 00 00 00 e0 aa b0 84 ff ff ff ff  ................\n  backtrace:\n    [<ffffffff81c06a68>] __kmem_cache_alloc_node+0x1e8/0x320\n    [<ffffffff81ab374e>] __kmalloc+0x4e/0x90\n    [<ffffffff832aec6d>] mlxsw_sp_acl_ruleset_get+0x34d/0x7a0\n    [<ffffffff832bc195>] mlxsw_sp_flower_tmplt_create+0x145/0x180\n    [<ffffffff832b2e1a>] mlxsw_sp_flow_block_cb+0x1ea/0x280\n    [<ffffffff83a10613>] tc_setup_cb_call+0x183/0x340\n    [<ffffffff83a9f85a>] fl_tmplt_create+0x3da/0x4c0\n    [<ffffffff83a22435>] tc_ctl_chain+0xa15/0x1170\n    [<ffffffff838a863c>] rtnetlink_rcv_msg+0x3cc/0xed0\n    [<ffffffff83ac87f0>] netlink_rcv_skb+0x170/0x440\n    [<ffffffff83ac6270>] netlink_unicast+0x540/0x820\n    [<ffffffff83ac6e28>] netlink_sendmsg+0x8d8/0xda0\n    [<ffffffff83793def>] ____sys_sendmsg+0x30f/0xa80\n    [<ffffffff8379d29a>] ___sys_sendmsg+0x13a/0x1e0\n    [<ffffffff8379d50c>] __sys_sendmsg+0x11c/0x1f0\n    [<ffffffff843b9ce0>] do_syscall_64+0x40/0xe0\nunreferenced object 0xffff88816d2c0400 (size 1024):\n  comm \"tc\", pid 1079, jiffies 4294958525 (age 3074.287s)\n  hex dump (first 32 bytes):\n    40 00 00 00 00 00 00 00 57 f6 38 be 00 00 00 00  @.......W.8.....\n    10 04 2c 6d 81 88 ff ff 10 04 2c 6d 81 88 ff ff  ..,m......,m....\n  backtrace:\n    [<ffffffff81c06a68>] __kmem_cache_alloc_node+0x1e8/0x320\n    [<ffffffff81ab36c1>] __kmalloc_node+0x51/0x90\n    [<ffffffff81a8ed96>] kvmalloc_node+0xa6/0x1f0\n    [<ffffffff82827d03>] bucket_table_alloc.isra.0+0x83/0x460\n    [<ffffffff82828d2b>] rhashtable_init+0x43b/0x7c0\n    [<ffffffff832aed48>] mlxsw_sp_acl_ruleset_get+0x428/0x7a0\n    [<ffffffff832bc195>] mlxsw_sp_flower_tmplt_create+0x145/0x180\n    [<ffffffff832b2e1a>] mlxsw_sp_flow_block_cb+0x1ea/0x280\n    [<ffffffff83a10613>] tc_setup_cb_call+0x183/0x340\n    [<ffffffff83a9f85a>] fl_tmplt_create+0x3da/0x4c0\n    [<ffffffff83a22435>] tc_ctl_chain+0xa15/0x1170\n    [<ffffffff838a863c>] rtnetlink_rcv_msg+0x3cc/0xed0\n    [<ffffffff83ac87f0>] netlink_rcv_skb+0x170/0x440\n    [<ffffffff83ac6270>] netlink_unicast+0x540/0x820\n    [<ffffffff83ac6e28>] netlink_sendmsg+0x8d8/0xda0\n    [<ffffffff83793def>] ____sys_sendmsg+0x30f/0xa80\n\n[2]\n # tc qdisc add dev swp1 clsact\n # tc chain add dev swp1 ingress proto ip chain 1 flower dst_ip 0.0.0.0/32\n # tc qdisc del dev\n---truncated---",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26739",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: net/sched: act_mirred: don't override retval if we already lost the skb",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/sched: act_mirred: don't override retval if we already lost the skb\n\nIf we're redirecting the skb, and haven't called tcf_mirred_forward(),\nyet, we need to tell the core to drop the skb by setting the retcode\nto SHOT. If we have called tcf_mirred_forward(), however, the skb\nis out of our hands and returning SHOT will lead to UaF.\n\nMove the retval override to the error path which actually need it.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26836",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: platform/x86: think-lmi: Fix password opcode ordering for workstations",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nplatform/x86: think-lmi: Fix password opcode ordering for workstations\n\nThe Lenovo workstations require the password opcode to be run before\nthe attribute value is changed (if Admin password is enabled).\n\nTested on some Thinkpads to confirm they are OK with this order too.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26913",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Fix dcn35 8k30 Underflow/Corruption Issue",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Fix dcn35 8k30 Underflow/Corruption Issue\n\n[why]\nodm calculation is missing for pipe split policy determination\nand cause Underflow/Corruption issue.\n\n[how]\nAdd the odm calculation.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26930",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: scsi: qla2xxx: Fix double free of the ha-&gt;vp_map pointer",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nscsi: qla2xxx: Fix double free of the ha->vp_map pointer\n\nCoverity scan reported potential risk of double free of the pointer\nha->vp_map.  ha->vp_map was freed in qla2x00_mem_alloc(), and again freed\nin function qla2x00_mem_free(ha).\n\nAssign NULL to vp_map and kfree take care of NULL.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26944",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: btrfs: zoned: fix use-after-free in do_zone_finish()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: zoned: fix use-after-free in do_zone_finish()\n\nShinichiro reported the following use-after-free triggered by the device\nreplace operation in fstests btrfs/070.\n\n BTRFS info (device nullb1): scrub: finished on devid 1 with status: 0\n ==================================================================\n BUG: KASAN: slab-use-after-free in do_zone_finish+0x91a/0xb90 [btrfs]\n Read of size 8 at addr ffff8881543c8060 by task btrfs-cleaner/3494007\n\n CPU: 0 PID: 3494007 Comm: btrfs-cleaner Tainted: G        W          6.8.0-rc5-kts #1\n Hardware name: Supermicro Super Server/X11SPi-TF, BIOS 3.3 02/21/2020\n Call Trace:\n  <TASK>\n  dump_stack_lvl+0x5b/0x90\n  print_report+0xcf/0x670\n  ? __virt_addr_valid+0x200/0x3e0\n  kasan_report+0xd8/0x110\n  ? do_zone_finish+0x91a/0xb90 [btrfs]\n  ? do_zone_finish+0x91a/0xb90 [btrfs]\n  do_zone_finish+0x91a/0xb90 [btrfs]\n  btrfs_delete_unused_bgs+0x5e1/0x1750 [btrfs]\n  ? __pfx_btrfs_delete_unused_bgs+0x10/0x10 [btrfs]\n  ? btrfs_put_root+0x2d/0x220 [btrfs]\n  ? btrfs_clean_one_deleted_snapshot+0x299/0x430 [btrfs]\n  cleaner_kthread+0x21e/0x380 [btrfs]\n  ? __pfx_cleaner_kthread+0x10/0x10 [btrfs]\n  kthread+0x2e3/0x3c0\n  ? __pfx_kthread+0x10/0x10\n  ret_from_fork+0x31/0x70\n  ? __pfx_kthread+0x10/0x10\n  ret_from_fork_asm+0x1b/0x30\n  </TASK>\n\n Allocated by task 3493983:\n  kasan_save_stack+0x33/0x60\n  kasan_save_track+0x14/0x30\n  __kasan_kmalloc+0xaa/0xb0\n  btrfs_alloc_device+0xb3/0x4e0 [btrfs]\n  device_list_add.constprop.0+0x993/0x1630 [btrfs]\n  btrfs_scan_one_device+0x219/0x3d0 [btrfs]\n  btrfs_control_ioctl+0x26e/0x310 [btrfs]\n  __x64_sys_ioctl+0x134/0x1b0\n  do_syscall_64+0x99/0x190\n  entry_SYSCALL_64_after_hwframe+0x6e/0x76\n\n Freed by task 3494056:\n  kasan_save_stack+0x33/0x60\n  kasan_save_track+0x14/0x30\n  kasan_save_free_info+0x3f/0x60\n  poison_slab_object+0x102/0x170\n  __kasan_slab_free+0x32/0x70\n  kfree+0x11b/0x320\n  btrfs_rm_dev_replace_free_srcdev+0xca/0x280 [btrfs]\n  btrfs_dev_replace_finishing+0xd7e/0x14f0 [btrfs]\n  btrfs_dev_replace_by_ioctl+0x1286/0x25a0 [btrfs]\n  btrfs_ioctl+0xb27/0x57d0 [btrfs]\n  __x64_sys_ioctl+0x134/0x1b0\n  do_syscall_64+0x99/0x190\n  entry_SYSCALL_64_after_hwframe+0x6e/0x76\n\n The buggy address belongs to the object at ffff8881543c8000\n  which belongs to the cache kmalloc-1k of size 1024\n The buggy address is located 96 bytes inside of\n  freed 1024-byte region [ffff8881543c8000, ffff8881543c8400)\n\n The buggy address belongs to the physical page:\n page:00000000fe2c1285 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x1543c8\n head:00000000fe2c1285 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0\n flags: 0x17ffffc0000840(slab|head|node=0|zone=2|lastcpupid=0x1fffff)\n page_type: 0xffffffff()\n raw: 0017ffffc0000840 ffff888100042dc0 ffffea0019e8f200 dead000000000002\n raw: 0000000000000000 0000000000100010 00000001ffffffff 0000000000000000\n page dumped because: kasan: bad access detected\n\n Memory state around the buggy address:\n  ffff8881543c7f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  ffff8881543c7f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n >ffff8881543c8000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                                                        ^\n  ffff8881543c8080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n  ffff8881543c8100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n\nThis UAF happens because we're accessing stale zone information of a\nalready removed btrfs_device in do_zone_finish().\n\nThe sequence of events is as follows:\n\nbtrfs_dev_replace_start\n  btrfs_scrub_dev\n   btrfs_dev_replace_finishing\n    btrfs_dev_replace_update_device_in_mapping_tree <-- devices replaced\n    btrfs_rm_dev_replace_free_srcdev\n     btrfs_free_device                              <-- device freed\n\ncleaner_kthread\n btrfs_delete_unused_bgs\n  btrfs_zone_finish\n   do_zone_finish              <-- refers the freed device\n\nThe reason for this is that we're using a\n---truncated---",
            "fix_available": false
          },
          {
            "id": "CVE-2024-26982",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: Squashfs: check the inode number is not the invalid value of zero",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nSquashfs: check the inode number is not the invalid value of zero\n\nSyskiller has produced an out of bounds access in fill_meta_index().\n\nThat out of bounds access is ultimately caused because the inode\nhas an inode number with the invalid value of zero, which was not checked.\n\nThe reason this causes the out of bounds access is due to following\nsequence of events:\n\n1. Fill_meta_index() is called to allocate (via empty_meta_index())\n   and fill a metadata index.  It however suffers a data read error\n   and aborts, invalidating the newly returned empty metadata index.\n   It does this by setting the inode number of the index to zero,\n   which means unused (zero is not a valid inode number).\n\n2. When fill_meta_index() is subsequently called again on another\n   read operation, locate_meta_index() returns the previous index\n   because it matches the inode number of 0.  Because this index\n   has been returned it is expected to have been filled, and because\n   it hasn't been, an out of bounds access is performed.\n\nThis patch adds a sanity check which checks that the inode number\nis not zero when the inode is created and returns -EINVAL if it is.\n\n[phillip@squashfs.org.uk: whitespace fix]\n  Link: https://lkml.kernel.org/r/20240409204723.446925-1-phillip@squashfs.org.uk",
            "fix_available": false
          },
          {
            "id": "CVE-2024-27042",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amdgpu: Fix potential out-of-bounds access in &#39;amdgpu_discovery_reg_base_init()&#39;",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amdgpu: Fix potential out-of-bounds access in 'amdgpu_discovery_reg_base_init()'\n\nThe issue arises when the array 'adev->vcn.vcn_config' is accessed\nbefore checking if the index 'adev->vcn.num_vcn_inst' is within the\nbounds of the array.\n\nThe fix involves moving the bounds check before the array access. This\nensures that 'adev->vcn.num_vcn_inst' is within the bounds of the array\nbefore it is used as an index.\n\nFixes the below:\ndrivers/gpu/drm/amd/amdgpu/amdgpu_discovery.c:1289 amdgpu_discovery_reg_base_init() error: testing array offset 'adev->vcn.num_vcn_inst' after use.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-35866",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: smb: client: fix potential UAF in cifs_dump_full_key()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsmb: client: fix potential UAF in cifs_dump_full_key()\n\nSkip sessions that are being teared down (status == SES_EXITING) to\navoid UAF.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-35887",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: ax25: fix use-after-free bugs caused by ax25_ds_del_timer",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nax25: fix use-after-free bugs caused by ax25_ds_del_timer\n\nWhen the ax25 device is detaching, the ax25_dev_device_down()\ncalls ax25_ds_del_timer() to cleanup the slave_timer. When\nthe timer handler is running, the ax25_ds_del_timer() that\ncalls del_timer() in it will return directly. As a result,\nthe use-after-free bugs could happen, one of the scenarios\nis shown below:\n\n      (Thread 1)          |      (Thread 2)\n                          | ax25_ds_timeout()\nax25_dev_device_down()    |\n  ax25_ds_del_timer()     |\n    del_timer()           |\n  ax25_dev_put() //FREE   |\n                          |  ax25_dev-> //USE\n\nIn order to mitigate bugs, when the device is detaching, use\ntimer_shutdown_sync() to stop the timer.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-35929",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: rcu/nocb: Fix WARN_ON_ONCE() in the rcu_nocb_bypass_lock()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nrcu/nocb: Fix WARN_ON_ONCE() in the rcu_nocb_bypass_lock()\n\nFor the kernels built with CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y and\nCONFIG_RCU_LAZY=y, the following scenarios will trigger WARN_ON_ONCE()\nin the rcu_nocb_bypass_lock() and rcu_nocb_wait_contended() functions:\n\n        CPU2                                               CPU11\nkthread\nrcu_nocb_cb_kthread                                       ksys_write\nrcu_do_batch                                              vfs_write\nrcu_torture_timer_cb                                      proc_sys_write\n__kmem_cache_free                                         proc_sys_call_handler\nkmemleak_free                                             drop_caches_sysctl_handler\ndelete_object_full                                        drop_slab\n__delete_object                                           shrink_slab\nput_object                                                lazy_rcu_shrink_scan\ncall_rcu                                                  rcu_nocb_flush_bypass\n__call_rcu_commn                                            rcu_nocb_bypass_lock\n                                                            raw_spin_trylock(&rdp->nocb_bypass_lock) fail\n                                                            atomic_inc(&rdp->nocb_lock_contended);\nrcu_nocb_wait_contended                                     WARN_ON_ONCE(smp_processor_id() != rdp->cpu);\n WARN_ON_ONCE(atomic_read(&rdp->nocb_lock_contended))                                          |\n                            |_ _ _ _ _ _ _ _ _ _same rdp and rdp->cpu != 11_ _ _ _ _ _ _ _ _ __|\n\nReproduce this bug with \"echo 3 > /proc/sys/vm/drop_caches\".\n\nThis commit therefore uses rcu_nocb_try_flush_bypass() instead of\nrcu_nocb_flush_bypass() in lazy_rcu_shrink_scan().  If the nocb_bypass\nqueue is being flushed, then rcu_nocb_try_flush_bypass will return\ndirectly.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-36013",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: Bluetooth: L2CAP: Fix slab-use-after-free in l2cap_connect()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nBluetooth: L2CAP: Fix slab-use-after-free in l2cap_connect()\n\nExtend a critical section to prevent chan from early freeing.\nAlso make the l2cap_connect() return type void. Nothing is using the\nreturned value but it is ugly to return a potentially freed pointer.\nMaking it void will help with backports because earlier kernels did use\nthe return value. Now the compile will break for kernels where this\npatch is not a complete fix.\n\nCall stack summary:\n\n[use]\nl2cap_bredr_sig_cmd\n  l2cap_connect\n  \u250c mutex_lock(&conn->chan_lock);\n  \u2502 chan = pchan->ops->new_connection(pchan); <- alloc chan\n  \u2502 __l2cap_chan_add(conn, chan);\n  \u2502   l2cap_chan_hold(chan);\n  \u2502   list_add(&chan->list, &conn->chan_l);   ... (1)\n  \u2514 mutex_unlock(&conn->chan_lock);\n    chan->conf_state              ... (4) <- use after free\n\n[free]\nl2cap_conn_del\n\u250c mutex_lock(&conn->chan_lock);\n\u2502 foreach chan in conn->chan_l:            ... (2)\n\u2502   l2cap_chan_put(chan);\n\u2502     l2cap_chan_destroy\n\u2502       kfree(chan)               ... (3) <- chan freed\n\u2514 mutex_unlock(&conn->chan_lock);\n\n==================================================================\nBUG: KASAN: slab-use-after-free in instrument_atomic_read\ninclude/linux/instrumented.h:68 [inline]\nBUG: KASAN: slab-use-after-free in _test_bit\ninclude/asm-generic/bitops/instrumented-non-atomic.h:141 [inline]\nBUG: KASAN: slab-use-after-free in l2cap_connect+0xa67/0x11a0\nnet/bluetooth/l2cap_core.c:4260\nRead of size 8 at addr ffff88810bf040a0 by task kworker/u3:1/311",
            "fix_available": false
          },
          {
            "id": "CVE-2024-36921",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: wifi: iwlwifi: mvm: guard against invalid STA ID on removal",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nwifi: iwlwifi: mvm: guard against invalid STA ID on removal\n\nGuard against invalid station IDs in iwl_mvm_mld_rm_sta_id as that would\nresult in out-of-bounds array accesses. This prevents issues should the\ndriver get into a bad state during error handling.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-38570",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: gfs2: Fix potential glock use-after-free on unmount",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ngfs2: Fix potential glock use-after-free on unmount\n\nWhen a DLM lockspace is released and there ares still locks in that\nlockspace, DLM will unlock those locks automatically.  Commit\nfb6791d100d1b started exploiting this behavior to speed up filesystem\nunmount: gfs2 would simply free glocks it didn't want to unlock and then\nrelease the lockspace.  This didn't take the bast callbacks for\nasynchronous lock contention notifications into account, which remain\nactive until until a lock is unlocked or its lockspace is released.\n\nTo prevent those callbacks from accessing deallocated objects, put the\nglocks that should not be unlocked on the sd_dead_glocks list, release\nthe lockspace, and only then free those glocks.\n\nAs an additional measure, ignore unexpected ast and bast callbacks if\nthe receiving glock is dead.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-38630",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: watchdog: cpu5wdt.c: Fix use-after-free bug caused by cpu5wdt_trigger",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nwatchdog: cpu5wdt.c: Fix use-after-free bug caused by cpu5wdt_trigger\n\nWhen the cpu5wdt module is removing, the origin code uses del_timer() to\nde-activate the timer. If the timer handler is running, del_timer() could\nnot stop it and will return directly. If the port region is released by\nrelease_region() and then the timer handler cpu5wdt_trigger() calls outb()\nto write into the region that is released, the use-after-free bug will\nhappen.\n\nChange del_timer() to timer_shutdown_sync() in order that the timer handler\ncould be finished before the port region is released.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-39479",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/i915/hwmon: Get rid of devm",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/i915/hwmon: Get rid of devm\n\nWhen both hwmon and hwmon drvdata (on which hwmon depends) are device\nmanaged resources, the expectation, on device unbind, is that hwmon will be\nreleased before drvdata. However, in i915 there are two separate code\npaths, which both release either drvdata or hwmon and either can be\nreleased before the other. These code paths (for device unbind) are as\nfollows (see also the bug referenced below):\n\nCall Trace:\nrelease_nodes+0x11/0x70\ndevres_release_group+0xb2/0x110\ncomponent_unbind_all+0x8d/0xa0\ncomponent_del+0xa5/0x140\nintel_pxp_tee_component_fini+0x29/0x40 [i915]\nintel_pxp_fini+0x33/0x80 [i915]\ni915_driver_remove+0x4c/0x120 [i915]\ni915_pci_remove+0x19/0x30 [i915]\npci_device_remove+0x32/0xa0\ndevice_release_driver_internal+0x19c/0x200\nunbind_store+0x9c/0xb0\n\nand\n\nCall Trace:\nrelease_nodes+0x11/0x70\ndevres_release_all+0x8a/0xc0\ndevice_unbind_cleanup+0x9/0x70\ndevice_release_driver_internal+0x1c1/0x200\nunbind_store+0x9c/0xb0\n\nThis means that in i915, if use devm, we cannot gurantee that hwmon will\nalways be released before drvdata. Which means that we have a uaf if hwmon\nsysfs is accessed when drvdata has been released but hwmon hasn't.\n\nThe only way out of this seems to be do get rid of devm_ and release/free\neverything explicitly during device unbind.\n\nv2: Change commit message and other minor code changes\nv3: Cleanup from i915_hwmon_register on error (Armin Wolf)\nv4: Eliminate potential static analyzer warning (Rodrigo)\n    Eliminate fetch_and_zero (Jani)\nv5: Restore previous logic for ddat_gt->hwmon_dev error return (Andi)",
            "fix_available": false
          },
          {
            "id": "CVE-2024-39508",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: io_uring/io-wq: Use set_bit() and test_bit() at worker->flags",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nio_uring/io-wq: Use set_bit() and test_bit() at worker->flags\n\nUtilize set_bit() and test_bit() on worker->flags within io_uring/io-wq\nto address potential data races.\n\nThe structure io_worker->flags may be accessed through various data\npaths, leading to concurrency issues. When KCSAN is enabled, it reveals\ndata races occurring in io_worker_handle_work and\nio_wq_activate_free_worker functions.\n\n\t BUG: KCSAN: data-race in io_worker_handle_work / io_wq_activate_free_worker\n\t write to 0xffff8885c4246404 of 4 bytes by task 49071 on cpu 28:\n\t io_worker_handle_work (io_uring/io-wq.c:434 io_uring/io-wq.c:569)\n\t io_wq_worker (io_uring/io-wq.c:?)\n<snip>\n\n\t read to 0xffff8885c4246404 of 4 bytes by task 49024 on cpu 5:\n\t io_wq_activate_free_worker (io_uring/io-wq.c:? io_uring/io-wq.c:285)\n\t io_wq_enqueue (io_uring/io-wq.c:947)\n\t io_queue_iowq (io_uring/io_uring.c:524)\n\t io_req_task_submit (io_uring/io_uring.c:1511)\n\t io_handle_tw_list (io_uring/io_uring.c:1198)\n<snip>\n\nLine numbers against commit 18daea77cca6 (\"Merge tag 'for-linus' of\ngit://git.kernel.org/pub/scm/virt/kvm/kvm\").\n\nThese races involve writes and reads to the same memory location by\ndifferent tasks running on different CPUs. To mitigate this, refactor\nthe code to use atomic operations such as set_bit(), test_bit(), and\nclear_bit() instead of basic \"and\" and \"or\" operations. This ensures\nthread-safe manipulation of worker flags.\n\nAlso, move `create_index` to avoid holes in the structure.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-41013",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: xfs: don&#39;t walk off the end of a directory data block",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nxfs: don't walk off the end of a directory data block\n\nThis adds sanity checks for xfs_dir2_data_unused and xfs_dir2_data_entry\nto make sure don't stray beyond valid memory region. Before patching, the\nloop simply checks that the start offset of the dup and dep is within the\nrange. So in a crafted image, if last entry is xfs_dir2_data_unused, we\ncan change dup->length to dup->length-1 and leave 1 byte of space. In the\nnext traversal, this space will be considered as dup or dep. We may\nencounter an out of bound read when accessing the fixed members.\n\nIn the patch, we make sure that the remaining bytes large enough to hold\nan unused entry before accessing xfs_dir2_data_unused and\nxfs_dir2_data_unused is XFS_DIR2_DATA_ALIGN byte aligned. We also make\nsure that the remaining bytes large enough to hold a dirent with a\nsingle-byte name before accessing xfs_dir2_data_entry.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-42162",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: gve: Account for stopped queues when reading NIC stats",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ngve: Account for stopped queues when reading NIC stats\n\nWe now account for the fact that the NIC might send us stats for a\nsubset of queues. Without this change, gve_get_ethtool_stats might make\nan invalid access on the priv->stats_report->stats array.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-44941",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: f2fs: fix to cover read extent cache access with lock",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nf2fs: fix to cover read extent cache access with lock\n\nsyzbot reports a f2fs bug as below:\n\nBUG: KASAN: slab-use-after-free in sanity_check_extent_cache+0x370/0x410 fs/f2fs/extent_cache.c:46\nRead of size 4 at addr ffff8880739ab220 by task syz-executor200/5097\n\nCPU: 0 PID: 5097 Comm: syz-executor200 Not tainted 6.9.0-rc6-syzkaller #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/27/2024\nCall Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114\n print_address_description mm/kasan/report.c:377 [inline]\n print_report+0x169/0x550 mm/kasan/report.c:488\n kasan_report+0x143/0x180 mm/kasan/report.c:601\n sanity_check_extent_cache+0x370/0x410 fs/f2fs/extent_cache.c:46\n do_read_inode fs/f2fs/inode.c:509 [inline]\n f2fs_iget+0x33e1/0x46e0 fs/f2fs/inode.c:560\n f2fs_nfs_get_inode+0x74/0x100 fs/f2fs/super.c:3237\n generic_fh_to_dentry+0x9f/0xf0 fs/libfs.c:1413\n exportfs_decode_fh_raw+0x152/0x5f0 fs/exportfs/expfs.c:444\n exportfs_decode_fh+0x3c/0x80 fs/exportfs/expfs.c:584\n do_handle_to_path fs/fhandle.c:155 [inline]\n handle_to_path fs/fhandle.c:210 [inline]\n do_handle_open+0x495/0x650 fs/fhandle.c:226\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xf5/0x240 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nWe missed to cover sanity_check_extent_cache() w/ extent cache lock,\nso, below race case may happen, result in use after free issue.\n\n- f2fs_iget\n - do_read_inode\n  - f2fs_init_read_extent_tree\n  : add largest extent entry in to cache\n\t\t\t\t\t- shrink\n\t\t\t\t\t - f2fs_shrink_read_extent_tree\n\t\t\t\t\t  - __shrink_extent_tree\n\t\t\t\t\t   - __detach_extent_node\n\t\t\t\t\t   : drop largest extent entry\n  - sanity_check_extent_cache\n  : access et->largest w/o lock\n\nlet's refactor sanity_check_extent_cache() to avoid extent cache access\nand call it before f2fs_init_read_extent_tree() to fix this issue.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-44942",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: f2fs: fix to do sanity check on F2FS_INLINE_DATA flag in inode during GC",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nf2fs: fix to do sanity check on F2FS_INLINE_DATA flag in inode during GC\n\nsyzbot reports a f2fs bug as below:\n\n------------[ cut here ]------------\nkernel BUG at fs/f2fs/inline.c:258!\nCPU: 1 PID: 34 Comm: kworker/u8:2 Not tainted 6.9.0-rc6-syzkaller-00012-g9e4bc4bcae01 #0\nRIP: 0010:f2fs_write_inline_data+0x781/0x790 fs/f2fs/inline.c:258\nCall Trace:\n f2fs_write_single_data_page+0xb65/0x1d60 fs/f2fs/data.c:2834\n f2fs_write_cache_pages fs/f2fs/data.c:3133 [inline]\n __f2fs_write_data_pages fs/f2fs/data.c:3288 [inline]\n f2fs_write_data_pages+0x1efe/0x3a90 fs/f2fs/data.c:3315\n do_writepages+0x35b/0x870 mm/page-writeback.c:2612\n __writeback_single_inode+0x165/0x10b0 fs/fs-writeback.c:1650\n writeback_sb_inodes+0x905/0x1260 fs/fs-writeback.c:1941\n wb_writeback+0x457/0xce0 fs/fs-writeback.c:2117\n wb_do_writeback fs/fs-writeback.c:2264 [inline]\n wb_workfn+0x410/0x1090 fs/fs-writeback.c:2304\n process_one_work kernel/workqueue.c:3254 [inline]\n process_scheduled_works+0xa12/0x17c0 kernel/workqueue.c:3335\n worker_thread+0x86d/0xd70 kernel/workqueue.c:3416\n kthread+0x2f2/0x390 kernel/kthread.c:388\n ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147\n ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244\n\nThe root cause is: inline_data inode can be fuzzed, so that there may\nbe valid blkaddr in its direct node, once f2fs triggers background GC\nto migrate the block, it will hit f2fs_bug_on() during dirty page\nwriteback.\n\nLet's add sanity check on F2FS_INLINE_DATA flag in inode during GC,\nso that, it can forbid migrating inline_data inode's data block for\nfixing.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-44951",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: serial: sc16is7xx: fix TX fifo corruption",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nserial: sc16is7xx: fix TX fifo corruption\n\nSometimes, when a packet is received on channel A at almost the same time\nas a packet is about to be transmitted on channel B, we observe with a\nlogic analyzer that the received packet on channel A is transmitted on\nchannel B. In other words, the Tx buffer data on channel B is corrupted\nwith data from channel A.\n\nThe problem appeared since commit 4409df5866b7 (\"serial: sc16is7xx: change\nEFR lock to operate on each channels\"), which changed the EFR locking to\noperate on each channel instead of chip-wise.\n\nThis commit has introduced a regression, because the EFR lock is used not\nonly to protect the EFR registers access, but also, in a very obscure and\nundocumented way, to protect access to the data buffer, which is shared by\nthe Tx and Rx handlers, but also by each channel of the IC.\n\nFix this regression first by switching to kfifo_out_linear_ptr() in\nsc16is7xx_handle_tx() to eliminate the need for a shared Rx/Tx buffer.\n\nSecondly, replace the chip-wise Rx buffer with a separate Rx buffer for\neach channel.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-46774",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: powerpc/rtas: Prevent Spectre v1 gadget construction in sys_rtas()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\npowerpc/rtas: Prevent Spectre v1 gadget construction in sys_rtas()\n\nSmatch warns:\n\n  arch/powerpc/kernel/rtas.c:1932 __do_sys_rtas() warn: potential\n  spectre issue 'args.args' [r] (local cap)\n\nThe 'nargs' and 'nret' locals come directly from a user-supplied\nbuffer and are used as indexes into a small stack-based array and as\ninputs to copy_to_user() after they are subject to bounds checks.\n\nUse array_index_nospec() after the bounds checks to clamp these values\nfor speculative execution.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-46786",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: fscache: delete fscache_cookie_lru_timer when fscache exits to avoid UAF",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfscache: delete fscache_cookie_lru_timer when fscache exits to avoid UAF\n\nThe fscache_cookie_lru_timer is initialized when the fscache module\nis inserted, but is not deleted when the fscache module is removed.\nIf timer_reduce() is called before removing the fscache module,\nthe fscache_cookie_lru_timer will be added to the timer list of\nthe current cpu. Afterwards, a use-after-free will be triggered\nin the softIRQ after removing the fscache module, as follows:\n\n==================================================================\nBUG: unable to handle page fault for address: fffffbfff803c9e9\n PF: supervisor read access in kernel mode\n PF: error_code(0x0000) - not-present page\nPGD 21ffea067 P4D 21ffea067 PUD 21ffe6067 PMD 110a7c067 PTE 0\nOops: Oops: 0000 [#1] PREEMPT SMP KASAN PTI\nCPU: 1 UID: 0 PID: 0 Comm: swapper/1 Tainted: G W 6.11.0-rc3 #855\nTainted: [W]=WARN\nRIP: 0010:__run_timer_base.part.0+0x254/0x8a0\nCall Trace:\n <IRQ>\n tmigr_handle_remote_up+0x627/0x810\n __walk_groups.isra.0+0x47/0x140\n tmigr_handle_remote+0x1fa/0x2f0\n handle_softirqs+0x180/0x590\n irq_exit_rcu+0x84/0xb0\n sysvec_apic_timer_interrupt+0x6e/0x90\n </IRQ>\n <TASK>\n asm_sysvec_apic_timer_interrupt+0x1a/0x20\nRIP: 0010:default_idle+0xf/0x20\n default_idle_call+0x38/0x60\n do_idle+0x2b5/0x300\n cpu_startup_entry+0x54/0x60\n start_secondary+0x20d/0x280\n common_startup_64+0x13e/0x148\n </TASK>\nModules linked in: [last unloaded: netfs]\n==================================================================\n\nTherefore delete fscache_cookie_lru_timer when removing the fscahe module.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-46811",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Fix index may exceed array range within fpu_update_bw_bounding_box",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Fix index may exceed array range within fpu_update_bw_bounding_box\n\n[Why]\nCoverity reports OVERRUN warning. soc.num_states could\nbe 40. But array range of bw_params->clk_table.entries is 8.\n\n[How]\nAssert if soc.num_states greater than 8.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-46813",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Check link_index before accessing dc-&gt;links[]",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Check link_index before accessing dc->links[]\n\n[WHY & HOW]\ndc->links[] has max size of MAX_LINKS and NULL is return when trying to\naccess with out-of-bound index.\n\nThis fixes 3 OVERRUN and 1 RESOURCE_LEAK issues reported by Coverity.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-46833",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: net: hns3: void array out of bound when loop tnl_num",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: hns3: void array out of bound when loop tnl_num\n\nWhen query reg inf of SSU, it loops tnl_num times. However, tnl_num comes\nfrom hardware and the length of array is a fixed value. To void array out\nof bound, make sure the loop time is not greater than the length of array",
            "fix_available": false
          },
          {
            "id": "CVE-2024-47691",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: f2fs: fix to avoid use-after-free in f2fs_stop_gc_thread()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nf2fs: fix to avoid use-after-free in f2fs_stop_gc_thread()\n\nsyzbot reports a f2fs bug as below:\n\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114\n print_report+0xe8/0x550 mm/kasan/report.c:491\n kasan_report+0x143/0x180 mm/kasan/report.c:601\n kasan_check_range+0x282/0x290 mm/kasan/generic.c:189\n instrument_atomic_read_write include/linux/instrumented.h:96 [inline]\n atomic_fetch_add_relaxed include/linux/atomic/atomic-instrumented.h:252 [inline]\n __refcount_add include/linux/refcount.h:184 [inline]\n __refcount_inc include/linux/refcount.h:241 [inline]\n refcount_inc include/linux/refcount.h:258 [inline]\n get_task_struct include/linux/sched/task.h:118 [inline]\n kthread_stop+0xca/0x630 kernel/kthread.c:704\n f2fs_stop_gc_thread+0x65/0xb0 fs/f2fs/gc.c:210\n f2fs_do_shutdown+0x192/0x540 fs/f2fs/file.c:2283\n f2fs_ioc_shutdown fs/f2fs/file.c:2325 [inline]\n __f2fs_ioctl+0x443a/0xbe60 fs/f2fs/file.c:4325\n vfs_ioctl fs/ioctl.c:51 [inline]\n __do_sys_ioctl fs/ioctl.c:907 [inline]\n __se_sys_ioctl+0xfc/0x170 fs/ioctl.c:893\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nThe root cause is below race condition, it may cause use-after-free\nissue in sbi->gc_th pointer.\n\n- remount\n - f2fs_remount\n  - f2fs_stop_gc_thread\n   - kfree(gc_th)\n\t\t\t\t- f2fs_ioc_shutdown\n\t\t\t\t - f2fs_do_shutdown\n\t\t\t\t  - f2fs_stop_gc_thread\n\t\t\t\t   - kthread_stop(gc_th->f2fs_gc_task)\n   : sbi->gc_thread = NULL;\n\nWe will call f2fs_do_shutdown() in two paths:\n- for f2fs_ioc_shutdown() path, we should grab sb->s_umount semaphore\nfor fixing.\n- for f2fs_shutdown() path, it's safe since caller has already grabbed\nsb->s_umount semaphore.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-49928",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: wifi: rtw89: avoid reading out of bounds when loading TX power FW elements",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nwifi: rtw89: avoid reading out of bounds when loading TX power FW elements\n\nBecause the loop-expression will do one more time before getting false from\ncond-expression, the original code copied one more entry size beyond valid\nregion.\n\nFix it by moving the entry copy to loop-body.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50029",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: Bluetooth: hci_conn: Fix UAF in hci_enhanced_setup_sync",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nBluetooth: hci_conn: Fix UAF in hci_enhanced_setup_sync\n\nThis checks if the ACL connection remains valid as it could be destroyed\nwhile hci_enhanced_setup_sync is pending on cmd_sync leading to the\nfollowing trace:\n\nBUG: KASAN: slab-use-after-free in hci_enhanced_setup_sync+0x91b/0xa60\nRead of size 1 at addr ffff888002328ffd by task kworker/u5:2/37\n\nCPU: 0 UID: 0 PID: 37 Comm: kworker/u5:2 Not tainted 6.11.0-rc6-01300-g810be445d8d6 #7099\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-2.fc40 04/01/2014\nWorkqueue: hci0 hci_cmd_sync_work\nCall Trace:\n <TASK>\n dump_stack_lvl+0x5d/0x80\n ? hci_enhanced_setup_sync+0x91b/0xa60\n print_report+0x152/0x4c0\n ? hci_enhanced_setup_sync+0x91b/0xa60\n ? __virt_addr_valid+0x1fa/0x420\n ? hci_enhanced_setup_sync+0x91b/0xa60\n kasan_report+0xda/0x1b0\n ? hci_enhanced_setup_sync+0x91b/0xa60\n hci_enhanced_setup_sync+0x91b/0xa60\n ? __pfx_hci_enhanced_setup_sync+0x10/0x10\n ? __pfx___mutex_lock+0x10/0x10\n hci_cmd_sync_work+0x1c2/0x330\n process_one_work+0x7d9/0x1360\n ? __pfx_lock_acquire+0x10/0x10\n ? __pfx_process_one_work+0x10/0x10\n ? assign_work+0x167/0x240\n worker_thread+0x5b7/0xf60\n ? __kthread_parkme+0xac/0x1c0\n ? __pfx_worker_thread+0x10/0x10\n ? __pfx_worker_thread+0x10/0x10\n kthread+0x293/0x360\n ? __pfx_kthread+0x10/0x10\n ret_from_fork+0x2f/0x70\n ? __pfx_kthread+0x10/0x10\n ret_from_fork_asm+0x1a/0x30\n </TASK>\n\nAllocated by task 34:\n kasan_save_stack+0x30/0x50\n kasan_save_track+0x14/0x30\n __kasan_kmalloc+0x8f/0xa0\n __hci_conn_add+0x187/0x17d0\n hci_connect_sco+0x2e1/0xb90\n sco_sock_connect+0x2a2/0xb80\n __sys_connect+0x227/0x2a0\n __x64_sys_connect+0x6d/0xb0\n do_syscall_64+0x71/0x140\n entry_SYSCALL_64_after_hwframe+0x76/0x7e\n\nFreed by task 37:\n kasan_save_stack+0x30/0x50\n kasan_save_track+0x14/0x30\n kasan_save_free_info+0x3b/0x60\n __kasan_slab_free+0x101/0x160\n kfree+0xd0/0x250\n device_release+0x9a/0x210\n kobject_put+0x151/0x280\n hci_conn_del+0x448/0xbf0\n hci_abort_conn_sync+0x46f/0x980\n hci_cmd_sync_work+0x1c2/0x330\n process_one_work+0x7d9/0x1360\n worker_thread+0x5b7/0xf60\n kthread+0x293/0x360\n ret_from_fork+0x2f/0x70\n ret_from_fork_asm+0x1a/0x30",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50063",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: bpf: Prevent tail call between progs attached to different hooks",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Prevent tail call between progs attached to different hooks\n\nbpf progs can be attached to kernel functions, and the attached functions\ncan take different parameters or return different return values. If\nprog attached to one kernel function tail calls prog attached to another\nkernel function, the ctx access or return value verification could be\nbypassed.\n\nFor example, if prog1 is attached to func1 which takes only 1 parameter\nand prog2 is attached to func2 which takes two parameters. Since verifier\nassumes the bpf ctx passed to prog2 is constructed based on func2's\nprototype, verifier allows prog2 to access the second parameter from\nthe bpf ctx passed to it. The problem is that verifier does not prevent\nprog1 from passing its bpf ctx to prog2 via tail call. In this case,\nthe bpf ctx passed to prog2 is constructed from func1 instead of func2,\nthat is, the assumption for ctx access verification is bypassed.\n\nAnother example, if BPF LSM prog1 is attached to hook file_alloc_security,\nand BPF LSM prog2 is attached to hook bpf_lsm_audit_rule_known. Verifier\nknows the return value rules for these two hooks, e.g. it is legal for\nbpf_lsm_audit_rule_known to return positive number 1, and it is illegal\nfor file_alloc_security to return positive number. So verifier allows\nprog2 to return positive number 1, but does not allow prog1 to return\npositive number. The problem is that verifier does not prevent prog1\nfrom calling prog2 via tail call. In this case, prog2's return value 1\nwill be used as the return value for prog1's hook file_alloc_security.\nThat is, the return value rule is bypassed.\n\nThis patch adds restriction for tail call to prevent such bypasses.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50112",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: x86/lam: Disable ADDRESS_MASKING in most cases",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/lam: Disable ADDRESS_MASKING in most cases\n\nLinear Address Masking (LAM) has a weakness related to transient\nexecution as described in the SLAM paper[1]. Unless Linear Address\nSpace Separation (LASS) is enabled this weakness may be exploitable.\n\nUntil kernel adds support for LASS[2], only allow LAM for COMPILE_TEST,\nor when speculation mitigations have been disabled at compile time,\notherwise keep LAM disabled.\n\nThere are no processors in market that support LAM yet, so currently\nnobody is affected by this issue.\n\n[1] SLAM: https://download.vusec.net/papers/slam_sp24.pdf\n[2] LASS: https://lore.kernel.org/lkml/20230609183632.48706-1-alexander.shishkin@linux.intel.com/\n\n[ dhansen: update SPECULATION_MITIGATIONS -> CPU_MITIGATIONS ]",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50217",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: btrfs: fix use-after-free of block device file in __btrfs_free_extra_devids()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix use-after-free of block device file in __btrfs_free_extra_devids()\n\nMounting btrfs from two images (which have the same one fsid and two\ndifferent dev_uuids) in certain executing order may trigger an UAF for\nvariable 'device->bdev_file' in __btrfs_free_extra_devids(). And\nfollowing are the details:\n\n1. Attach image_1 to loop0, attach image_2 to loop1, and scan btrfs\n   devices by ioctl(BTRFS_IOC_SCAN_DEV):\n\n             /  btrfs_device_1 \u2192 loop0\n   fs_device\n             \\  btrfs_device_2 \u2192 loop1\n2. mount /dev/loop0 /mnt\n   btrfs_open_devices\n    btrfs_device_1->bdev_file = btrfs_get_bdev_and_sb(loop0)\n    btrfs_device_2->bdev_file = btrfs_get_bdev_and_sb(loop1)\n   btrfs_fill_super\n    open_ctree\n     fail: btrfs_close_devices // -ENOMEM\n\t    btrfs_close_bdev(btrfs_device_1)\n             fput(btrfs_device_1->bdev_file)\n\t      // btrfs_device_1->bdev_file is freed\n\t    btrfs_close_bdev(btrfs_device_2)\n             fput(btrfs_device_2->bdev_file)\n\n3. mount /dev/loop1 /mnt\n   btrfs_open_devices\n    btrfs_get_bdev_and_sb(&bdev_file)\n     // EIO, btrfs_device_1->bdev_file is not assigned,\n     // which points to a freed memory area\n    btrfs_device_2->bdev_file = btrfs_get_bdev_and_sb(loop1)\n   btrfs_fill_super\n    open_ctree\n     btrfs_free_extra_devids\n      if (btrfs_device_1->bdev_file)\n       fput(btrfs_device_1->bdev_file) // UAF !\n\nFix it by setting 'device->bdev_file' as 'NULL' after closing the\nbtrfs_device in btrfs_close_one_device().",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50226",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: cxl/port: Fix use-after-free, permit out-of-order decoder shutdown",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ncxl/port: Fix use-after-free, permit out-of-order decoder shutdown\n\nIn support of investigating an initialization failure report [1],\ncxl_test was updated to register mock memory-devices after the mock\nroot-port/bus device had been registered. That led to cxl_test crashing\nwith a use-after-free bug with the following signature:\n\n    cxl_port_attach_region: cxl region3: cxl_host_bridge.0:port3 decoder3.0 add: mem0:decoder7.0 @ 0 next: cxl_switch_uport.0 nr_eps: 1 nr_targets: 1\n    cxl_port_attach_region: cxl region3: cxl_host_bridge.0:port3 decoder3.0 add: mem4:decoder14.0 @ 1 next: cxl_switch_uport.0 nr_eps: 2 nr_targets: 1\n    cxl_port_setup_targets: cxl region3: cxl_switch_uport.0:port6 target[0] = cxl_switch_dport.0 for mem0:decoder7.0 @ 0\n1)  cxl_port_setup_targets: cxl region3: cxl_switch_uport.0:port6 target[1] = cxl_switch_dport.4 for mem4:decoder14.0 @ 1\n    [..]\n    cxld_unregister: cxl decoder14.0:\n    cxl_region_decode_reset: cxl_region region3:\n    mock_decoder_reset: cxl_port port3: decoder3.0 reset\n2)  mock_decoder_reset: cxl_port port3: decoder3.0: out of order reset, expected decoder3.1\n    cxl_endpoint_decoder_release: cxl decoder14.0:\n    [..]\n    cxld_unregister: cxl decoder7.0:\n3)  cxl_region_decode_reset: cxl_region region3:\n    Oops: general protection fault, probably for non-canonical address 0x6b6b6b6b6b6b6bc3: 0000 [#1] PREEMPT SMP PTI\n    [..]\n    RIP: 0010:to_cxl_port+0x8/0x60 [cxl_core]\n    [..]\n    Call Trace:\n     <TASK>\n     cxl_region_decode_reset+0x69/0x190 [cxl_core]\n     cxl_region_detach+0xe8/0x210 [cxl_core]\n     cxl_decoder_kill_region+0x27/0x40 [cxl_core]\n     cxld_unregister+0x5d/0x60 [cxl_core]\n\nAt 1) a region has been established with 2 endpoint decoders (7.0 and\n14.0). Those endpoints share a common switch-decoder in the topology\n(3.0). At teardown, 2), decoder14.0 is the first to be removed and hits\nthe \"out of order reset case\" in the switch decoder. The effect though\nis that region3 cleanup is aborted leaving it in-tact and\nreferencing decoder14.0. At 3) the second attempt to teardown region3\ntrips over the stale decoder14.0 object which has long since been\ndeleted.\n\nThe fix here is to recognize that the CXL specification places no\nmandate on in-order shutdown of switch-decoders, the driver enforces\nin-order allocation, and hardware enforces in-order commit. So, rather\nthan fail and leave objects dangling, always remove them.\n\nIn support of making cxl_region_decode_reset() always succeed,\ncxl_region_invalidate_memregion() failures are turned into warnings.\nCrashing the kernel is ok there since system integrity is at risk if\ncaches cannot be managed around physical address mutation events like\nCXL region destruction.\n\nA new device_for_each_child_reverse_from() is added to cleanup\nport->commit_end after all dependent decoders have been disabled. In\nother words if decoders are allocated 0->1->2 and disabled 1->2->0 then\nport->commit_end only decrements from 2 after 2 has been disabled, and\nit decrements all the way to zero since 1 was disabled previously.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-50246",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: fs/ntfs3: Add rough attr alloc_size check",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/ntfs3: Add rough attr alloc_size check",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53068",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: firmware: arm_scmi: Fix slab-use-after-free in scmi_bus_notifier()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfirmware: arm_scmi: Fix slab-use-after-free in scmi_bus_notifier()\n\nThe scmi_dev->name is released prematurely in __scmi_device_destroy(),\nwhich causes slab-use-after-free when accessing scmi_dev->name in\nscmi_bus_notifier(). So move the release of scmi_dev->name to\nscmi_device_release() to avoid slab-use-after-free.\n\n  |  BUG: KASAN: slab-use-after-free in strncmp+0xe4/0xec\n  |  Read of size 1 at addr ffffff80a482bcc0 by task swapper/0/1\n  |\n  |  CPU: 1 PID: 1 Comm: swapper/0 Not tainted 6.6.38-debug #1\n  |  Hardware name: Qualcomm Technologies, Inc. SA8775P Ride (DT)\n  |  Call trace:\n  |   dump_backtrace+0x94/0x114\n  |   show_stack+0x18/0x24\n  |   dump_stack_lvl+0x48/0x60\n  |   print_report+0xf4/0x5b0\n  |   kasan_report+0xa4/0xec\n  |   __asan_report_load1_noabort+0x20/0x2c\n  |   strncmp+0xe4/0xec\n  |   scmi_bus_notifier+0x5c/0x54c\n  |   notifier_call_chain+0xb4/0x31c\n  |   blocking_notifier_call_chain+0x68/0x9c\n  |   bus_notify+0x54/0x78\n  |   device_del+0x1bc/0x840\n  |   device_unregister+0x20/0xb4\n  |   __scmi_device_destroy+0xac/0x280\n  |   scmi_device_destroy+0x94/0xd0\n  |   scmi_chan_setup+0x524/0x750\n  |   scmi_probe+0x7fc/0x1508\n  |   platform_probe+0xc4/0x19c\n  |   really_probe+0x32c/0x99c\n  |   __driver_probe_device+0x15c/0x3c4\n  |   driver_probe_device+0x5c/0x170\n  |   __driver_attach+0x1c8/0x440\n  |   bus_for_each_dev+0xf4/0x178\n  |   driver_attach+0x3c/0x58\n  |   bus_add_driver+0x234/0x4d4\n  |   driver_register+0xf4/0x3c0\n  |   __platform_driver_register+0x60/0x88\n  |   scmi_driver_init+0xb0/0x104\n  |   do_one_initcall+0xb4/0x664\n  |   kernel_init_freeable+0x3c8/0x894\n  |   kernel_init+0x24/0x1e8\n  |   ret_from_fork+0x10/0x20\n  |\n  |  Allocated by task 1:\n  |   kasan_save_stack+0x2c/0x54\n  |   kasan_set_track+0x2c/0x40\n  |   kasan_save_alloc_info+0x24/0x34\n  |   __kasan_kmalloc+0xa0/0xb8\n  |   __kmalloc_node_track_caller+0x6c/0x104\n  |   kstrdup+0x48/0x84\n  |   kstrdup_const+0x34/0x40\n  |   __scmi_device_create.part.0+0x8c/0x408\n  |   scmi_device_create+0x104/0x370\n  |   scmi_chan_setup+0x2a0/0x750\n  |   scmi_probe+0x7fc/0x1508\n  |   platform_probe+0xc4/0x19c\n  |   really_probe+0x32c/0x99c\n  |   __driver_probe_device+0x15c/0x3c4\n  |   driver_probe_device+0x5c/0x170\n  |   __driver_attach+0x1c8/0x440\n  |   bus_for_each_dev+0xf4/0x178\n  |   driver_attach+0x3c/0x58\n  |   bus_add_driver+0x234/0x4d4\n  |   driver_register+0xf4/0x3c0\n  |   __platform_driver_register+0x60/0x88\n  |   scmi_driver_init+0xb0/0x104\n  |   do_one_initcall+0xb4/0x664\n  |   kernel_init_freeable+0x3c8/0x894\n  |   kernel_init+0x24/0x1e8\n  |   ret_from_fork+0x10/0x20\n  |\n  |  Freed by task 1:\n  |   kasan_save_stack+0x2c/0x54\n  |   kasan_set_track+0x2c/0x40\n  |   kasan_save_free_info+0x38/0x5c\n  |   __kasan_slab_free+0xe8/0x164\n  |   __kmem_cache_free+0x11c/0x230\n  |   kfree+0x70/0x130\n  |   kfree_const+0x20/0x40\n  |   __scmi_device_destroy+0x70/0x280\n  |   scmi_device_destroy+0x94/0xd0\n  |   scmi_chan_setup+0x524/0x750\n  |   scmi_probe+0x7fc/0x1508\n  |   platform_probe+0xc4/0x19c\n  |   really_probe+0x32c/0x99c\n  |   __driver_probe_device+0x15c/0x3c4\n  |   driver_probe_device+0x5c/0x170\n  |   __driver_attach+0x1c8/0x440\n  |   bus_for_each_dev+0xf4/0x178\n  |   driver_attach+0x3c/0x58\n  |   bus_add_driver+0x234/0x4d4\n  |   driver_register+0xf4/0x3c0\n  |   __platform_driver_register+0x60/0x88\n  |   scmi_driver_init+0xb0/0x104\n  |   do_one_initcall+0xb4/0x664\n  |   kernel_init_freeable+0x3c8/0x894\n  |   kernel_init+0x24/0x1e8\n  |   ret_from_fork+0x10/0x20",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53108",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Adjust VSDB parser for replay feature",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Adjust VSDB parser for replay feature\n\nAt some point, the IEEE ID identification for the replay check in the\nAMD EDID was added. However, this check causes the following\nout-of-bounds issues when using KASAN:\n\n[   27.804016] BUG: KASAN: slab-out-of-bounds in amdgpu_dm_update_freesync_caps+0xefa/0x17a0 [amdgpu]\n[   27.804788] Read of size 1 at addr ffff8881647fdb00 by task systemd-udevd/383\n\n...\n\n[   27.821207] Memory state around the buggy address:\n[   27.821215]  ffff8881647fda00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   27.821224]  ffff8881647fda80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   27.821234] >ffff8881647fdb00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   27.821243]                    ^\n[   27.821250]  ffff8881647fdb80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[   27.821259]  ffff8881647fdc00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n[   27.821268] ==================================================================\n\nThis is caused because the ID extraction happens outside of the range of\nthe edid lenght. This commit addresses this issue by considering the\namd_vsdb_block size.\n\n(cherry picked from commit b7e381b1ccd5e778e3d9c44c669ad38439a861d8)",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53133",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Handle dml allocation failure to avoid crash",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Handle dml allocation failure to avoid crash\n\n[Why]\nIn the case where a dml allocation fails for any reason, the\ncurrent state's dml contexts would no longer be valid. Then\nsubsequent calls dc_state_copy_internal would shallow copy\ninvalid memory and if the new state was released, a double\nfree would occur.\n\n[How]\nReset dml pointers in new_state to NULL and avoid invalid\npointer\n\n(cherry picked from commit bcafdc61529a48f6f06355d78eb41b3aeda5296c)",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53166",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: block, bfq: fix bfqq uaf in bfq_limit_depth()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nblock, bfq: fix bfqq uaf in bfq_limit_depth()\n\nSet new allocated bfqq to bic or remove freed bfqq from bic are both\nprotected by bfqd->lock, however bfq_limit_depth() is deferencing bfqq\nfrom bic without the lock, this can lead to UAF if the io_context is\nshared by multiple tasks.\n\nFor example, test bfq with io_uring can trigger following UAF in v6.6:\n\n==================================================================\nBUG: KASAN: slab-use-after-free in bfqq_group+0x15/0x50\n\nCall Trace:\n <TASK>\n dump_stack_lvl+0x47/0x80\n print_address_description.constprop.0+0x66/0x300\n print_report+0x3e/0x70\n kasan_report+0xb4/0xf0\n bfqq_group+0x15/0x50\n bfqq_request_over_limit+0x130/0x9a0\n bfq_limit_depth+0x1b5/0x480\n __blk_mq_alloc_requests+0x2b5/0xa00\n blk_mq_get_new_requests+0x11d/0x1d0\n blk_mq_submit_bio+0x286/0xb00\n submit_bio_noacct_nocheck+0x331/0x400\n __block_write_full_folio+0x3d0/0x640\n writepage_cb+0x3b/0xc0\n write_cache_pages+0x254/0x6c0\n write_cache_pages+0x254/0x6c0\n do_writepages+0x192/0x310\n filemap_fdatawrite_wbc+0x95/0xc0\n __filemap_fdatawrite_range+0x99/0xd0\n filemap_write_and_wait_range.part.0+0x4d/0xa0\n blkdev_read_iter+0xef/0x1e0\n io_read+0x1b6/0x8a0\n io_issue_sqe+0x87/0x300\n io_wq_submit_work+0xeb/0x390\n io_worker_handle_work+0x24d/0x550\n io_wq_worker+0x27f/0x6c0\n ret_from_fork_asm+0x1b/0x30\n </TASK>\n\nAllocated by task 808602:\n kasan_save_stack+0x1e/0x40\n kasan_set_track+0x21/0x30\n __kasan_slab_alloc+0x83/0x90\n kmem_cache_alloc_node+0x1b1/0x6d0\n bfq_get_queue+0x138/0xfa0\n bfq_get_bfqq_handle_split+0xe3/0x2c0\n bfq_init_rq+0x196/0xbb0\n bfq_insert_request.isra.0+0xb5/0x480\n bfq_insert_requests+0x156/0x180\n blk_mq_insert_request+0x15d/0x440\n blk_mq_submit_bio+0x8a4/0xb00\n submit_bio_noacct_nocheck+0x331/0x400\n __blkdev_direct_IO_async+0x2dd/0x330\n blkdev_write_iter+0x39a/0x450\n io_write+0x22a/0x840\n io_issue_sqe+0x87/0x300\n io_wq_submit_work+0xeb/0x390\n io_worker_handle_work+0x24d/0x550\n io_wq_worker+0x27f/0x6c0\n ret_from_fork+0x2d/0x50\n ret_from_fork_asm+0x1b/0x30\n\nFreed by task 808589:\n kasan_save_stack+0x1e/0x40\n kasan_set_track+0x21/0x30\n kasan_save_free_info+0x27/0x40\n __kasan_slab_free+0x126/0x1b0\n kmem_cache_free+0x10c/0x750\n bfq_put_queue+0x2dd/0x770\n __bfq_insert_request.isra.0+0x155/0x7a0\n bfq_insert_request.isra.0+0x122/0x480\n bfq_insert_requests+0x156/0x180\n blk_mq_dispatch_plug_list+0x528/0x7e0\n blk_mq_flush_plug_list.part.0+0xe5/0x590\n __blk_flush_plug+0x3b/0x90\n blk_finish_plug+0x40/0x60\n do_writepages+0x19d/0x310\n filemap_fdatawrite_wbc+0x95/0xc0\n __filemap_fdatawrite_range+0x99/0xd0\n filemap_write_and_wait_range.part.0+0x4d/0xa0\n blkdev_read_iter+0xef/0x1e0\n io_read+0x1b6/0x8a0\n io_issue_sqe+0x87/0x300\n io_wq_submit_work+0xeb/0x390\n io_worker_handle_work+0x24d/0x550\n io_wq_worker+0x27f/0x6c0\n ret_from_fork+0x2d/0x50\n ret_from_fork_asm+0x1b/0x30\n\nFix the problem by protecting bic_to_bfqq() with bfqd->lock.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53168",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: sunrpc: fix one UAF issue caused by sunrpc kernel tcp socket",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsunrpc: fix one UAF issue caused by sunrpc kernel tcp socket\n\nBUG: KASAN: slab-use-after-free in tcp_write_timer_handler+0x156/0x3e0\nRead of size 1 at addr ffff888111f322cd by task swapper/0/0\n\nCPU: 0 UID: 0 PID: 0 Comm: swapper/0 Not tainted 6.12.0-rc4-dirty #7\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1\nCall Trace:\n <IRQ>\n dump_stack_lvl+0x68/0xa0\n print_address_description.constprop.0+0x2c/0x3d0\n print_report+0xb4/0x270\n kasan_report+0xbd/0xf0\n tcp_write_timer_handler+0x156/0x3e0\n tcp_write_timer+0x66/0x170\n call_timer_fn+0xfb/0x1d0\n __run_timers+0x3f8/0x480\n run_timer_softirq+0x9b/0x100\n handle_softirqs+0x153/0x390\n __irq_exit_rcu+0x103/0x120\n irq_exit_rcu+0xe/0x20\n sysvec_apic_timer_interrupt+0x76/0x90\n </IRQ>\n <TASK>\n asm_sysvec_apic_timer_interrupt+0x1a/0x20\nRIP: 0010:default_idle+0xf/0x20\nCode: 4c 01 c7 4c 29 c2 e9 72 ff ff ff 90 90 90 90 90 90 90 90 90 90 90 90\n 90 90 90 90 f3 0f 1e fa 66 90 0f 00 2d 33 f8 25 00 fb f4 <fa> c3 cc cc cc\n cc 66 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90\nRSP: 0018:ffffffffa2007e28 EFLAGS: 00000242\nRAX: 00000000000f3b31 RBX: 1ffffffff4400fc7 RCX: ffffffffa09c3196\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff9f00590f\nRBP: 0000000000000000 R08: 0000000000000001 R09: ffffed102360835d\nR10: ffff88811b041aeb R11: 0000000000000001 R12: 0000000000000000\nR13: ffffffffa202d7c0 R14: 0000000000000000 R15: 00000000000147d0\n default_idle_call+0x6b/0xa0\n cpuidle_idle_call+0x1af/0x1f0\n do_idle+0xbc/0x130\n cpu_startup_entry+0x33/0x40\n rest_init+0x11f/0x210\n start_kernel+0x39a/0x420\n x86_64_start_reservations+0x18/0x30\n x86_64_start_kernel+0x97/0xa0\n common_startup_64+0x13e/0x141\n </TASK>\n\nAllocated by task 595:\n kasan_save_stack+0x24/0x50\n kasan_save_track+0x14/0x30\n __kasan_slab_alloc+0x87/0x90\n kmem_cache_alloc_noprof+0x12b/0x3f0\n copy_net_ns+0x94/0x380\n create_new_namespaces+0x24c/0x500\n unshare_nsproxy_namespaces+0x75/0xf0\n ksys_unshare+0x24e/0x4f0\n __x64_sys_unshare+0x1f/0x30\n do_syscall_64+0x70/0x180\n entry_SYSCALL_64_after_hwframe+0x76/0x7e\n\nFreed by task 100:\n kasan_save_stack+0x24/0x50\n kasan_save_track+0x14/0x30\n kasan_save_free_info+0x3b/0x60\n __kasan_slab_free+0x54/0x70\n kmem_cache_free+0x156/0x5d0\n cleanup_net+0x5d3/0x670\n process_one_work+0x776/0xa90\n worker_thread+0x2e2/0x560\n kthread+0x1a8/0x1f0\n ret_from_fork+0x34/0x60\n ret_from_fork_asm+0x1a/0x30\n\nReproduction script:\n\nmkdir -p /mnt/nfsshare\nmkdir -p /mnt/nfs/netns_1\nmkfs.ext4 /dev/sdb\nmount /dev/sdb /mnt/nfsshare\nsystemctl restart nfs-server\nchmod 777 /mnt/nfsshare\nexportfs -i -o rw,no_root_squash *:/mnt/nfsshare\n\nip netns add netns_1\nip link add name veth_1_peer type veth peer veth_1\nifconfig veth_1_peer 11.11.0.254 up\nip link set veth_1 netns netns_1\nip netns exec netns_1 ifconfig veth_1 11.11.0.1\n\nip netns exec netns_1 /root/iptables -A OUTPUT -d 11.11.0.254 -p tcp \\\n\t--tcp-flags FIN FIN  -j DROP\n\n(note: In my environment, a DESTROY_CLIENTID operation is always sent\n immediately, breaking the nfs tcp connection.)\nip netns exec netns_1 timeout -s 9 300 mount -t nfs -o proto=tcp,vers=4.1 \\\n\t11.11.0.254:/mnt/nfsshare /mnt/nfs/netns_1\n\nip netns del netns_1\n\nThe reason here is that the tcp socket in netns_1 (nfs side) has been\nshutdown and closed (done in xs_destroy), but the FIN message (with ack)\nis discarded, and the nfsd side keeps sending retransmission messages.\nAs a result, when the tcp sock in netns_1 processes the received message,\nit sends the message (FIN message) in the sending queue, and the tcp timer\nis re-established. When the network namespace is deleted, the net structure\naccessed by tcp's timer handler function causes problems.\n\nTo fix this problem, let's hold netns refcnt for the tcp kernel socket as\ndone in other modules. This is an ugly hack which can easily be backported\nto earlier kernels. A proper fix which cleans up the interfaces will\nfollow, but may not be so easy to backport.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53179",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: smb: client: fix use-after-free of signing key",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsmb: client: fix use-after-free of signing key\n\nCustomers have reported use-after-free in @ses->auth_key.response with\nSMB2.1 + sign mounts which occurs due to following race:\n\ntask A                         task B\ncifs_mount()\n dfs_mount_share()\n  get_session()\n   cifs_mount_get_session()    cifs_send_recv()\n    cifs_get_smb_ses()          compound_send_recv()\n     cifs_setup_session()        smb2_setup_request()\n      kfree_sensitive()           smb2_calc_signature()\n                                   crypto_shash_setkey() *UAF*\n\nFix this by ensuring that we have a valid @ses->auth_key.response by\nchecking whether @ses->ses_status is SES_GOOD or SES_EXITING with\n@ses->ses_lock held.  After commit 24a9799aa8ef (\"smb: client: fix UAF\nin smb2_reconnect_server()\"), we made sure to call ->logoff() only\nwhen @ses was known to be good (e.g. valid ->auth_key.response), so\nit's safe to access signing key when @ses->ses_status == SES_EXITING.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53203",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: usb: typec: fix potential array underflow in ucsi_ccg_sync_control()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nusb: typec: fix potential array underflow in ucsi_ccg_sync_control()\n\nThe \"command\" variable can be controlled by the user via debugfs.  The\nworry is that if con_index is zero then \"&uc->ucsi->connector[con_index\n- 1]\" would be an array underflow.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-53216",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: nfsd: release svc_expkey/svc_export with rcu_work",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnfsd: release svc_expkey/svc_export with rcu_work\n\nThe last reference for `cache_head` can be reduced to zero in `c_show`\nand `e_show`(using `rcu_read_lock` and `rcu_read_unlock`). Consequently,\n`svc_export_put` and `expkey_put` will be invoked, leading to two\nissues:\n\n1. The `svc_export_put` will directly free ex_uuid. However,\n   `e_show`/`c_show` will access `ex_uuid` after `cache_put`, which can\n   trigger a use-after-free issue, shown below.\n\n   ==================================================================\n   BUG: KASAN: slab-use-after-free in svc_export_show+0x362/0x430 [nfsd]\n   Read of size 1 at addr ff11000010fdc120 by task cat/870\n\n   CPU: 1 UID: 0 PID: 870 Comm: cat Not tainted 6.12.0-rc3+ #1\n   Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n   1.16.1-2.fc37 04/01/2014\n   Call Trace:\n    <TASK>\n    dump_stack_lvl+0x53/0x70\n    print_address_description.constprop.0+0x2c/0x3a0\n    print_report+0xb9/0x280\n    kasan_report+0xae/0xe0\n    svc_export_show+0x362/0x430 [nfsd]\n    c_show+0x161/0x390 [sunrpc]\n    seq_read_iter+0x589/0x770\n    seq_read+0x1e5/0x270\n    proc_reg_read+0xe1/0x140\n    vfs_read+0x125/0x530\n    ksys_read+0xc1/0x160\n    do_syscall_64+0x5f/0x170\n    entry_SYSCALL_64_after_hwframe+0x76/0x7e\n\n   Allocated by task 830:\n    kasan_save_stack+0x20/0x40\n    kasan_save_track+0x14/0x30\n    __kasan_kmalloc+0x8f/0xa0\n    __kmalloc_node_track_caller_noprof+0x1bc/0x400\n    kmemdup_noprof+0x22/0x50\n    svc_export_parse+0x8a9/0xb80 [nfsd]\n    cache_do_downcall+0x71/0xa0 [sunrpc]\n    cache_write_procfs+0x8e/0xd0 [sunrpc]\n    proc_reg_write+0xe1/0x140\n    vfs_write+0x1a5/0x6d0\n    ksys_write+0xc1/0x160\n    do_syscall_64+0x5f/0x170\n    entry_SYSCALL_64_after_hwframe+0x76/0x7e\n\n   Freed by task 868:\n    kasan_save_stack+0x20/0x40\n    kasan_save_track+0x14/0x30\n    kasan_save_free_info+0x3b/0x60\n    __kasan_slab_free+0x37/0x50\n    kfree+0xf3/0x3e0\n    svc_export_put+0x87/0xb0 [nfsd]\n    cache_purge+0x17f/0x1f0 [sunrpc]\n    nfsd_destroy_serv+0x226/0x2d0 [nfsd]\n    nfsd_svc+0x125/0x1e0 [nfsd]\n    write_threads+0x16a/0x2a0 [nfsd]\n    nfsctl_transaction_write+0x74/0xa0 [nfsd]\n    vfs_write+0x1a5/0x6d0\n    ksys_write+0xc1/0x160\n    do_syscall_64+0x5f/0x170\n    entry_SYSCALL_64_after_hwframe+0x76/0x7e\n\n2. We cannot sleep while using `rcu_read_lock`/`rcu_read_unlock`.\n   However, `svc_export_put`/`expkey_put` will call path_put, which\n   subsequently triggers a sleeping operation due to the following\n   `dput`.\n\n   =============================\n   WARNING: suspicious RCU usage\n   5.10.0-dirty #141 Not tainted\n   -----------------------------\n   ...\n   Call Trace:\n   dump_stack+0x9a/0xd0\n   ___might_sleep+0x231/0x240\n   dput+0x39/0x600\n   path_put+0x1b/0x30\n   svc_export_put+0x17/0x80\n   e_show+0x1c9/0x200\n   seq_read_iter+0x63f/0x7c0\n   seq_read+0x226/0x2d0\n   vfs_read+0x113/0x2c0\n   ksys_read+0xc9/0x170\n   do_syscall_64+0x33/0x40\n   entry_SYSCALL_64_after_hwframe+0x67/0xd1\n\nFix these issues by using `rcu_work` to help release\n`svc_expkey`/`svc_export`. This approach allows for an asynchronous\ncontext to invoke `path_put` and also facilitates the freeing of\n`uuid/exp/key` after an RCU grace period.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-56538",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm: zynqmp_kms: Unplug DRM device before removal",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm: zynqmp_kms: Unplug DRM device before removal\n\nPrevent userspace accesses to the DRM device from causing\nuse-after-frees by unplugging the device before we remove it. This\ncauses any further userspace accesses to result in an error without\nfurther calls into this driver's internals.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-56775",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Fix handling of plane refcount",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Fix handling of plane refcount\n\n[Why]\nThe mechanism to backup and restore plane states doesn't maintain\nrefcount, which can cause issues if the refcount of the plane changes\nin between backup and restore operations, such as memory leaks if the\nrefcount was supposed to go down, or double frees / invalid memory\naccesses if the refcount was supposed to go up.\n\n[How]\nCache and re-apply current refcount when restoring plane states.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-56784",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: drm/amd/display: Adding array index check to prevent memory corruption",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Adding array index check to prevent memory corruption\n\n[Why & How]\nArray indices out of bound caused memory corruption. Adding checks to\nensure that array index stays in bound.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-57900",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: ila: serialize calls to nf_register_net_hooks()",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nila: serialize calls to nf_register_net_hooks()\n\nsyzbot found a race in ila_add_mapping() [1]\n\ncommit 031ae72825ce (\"ila: call nf_unregister_net_hooks() sooner\")\nattempted to fix a similar issue.\n\nLooking at the syzbot repro, we have concurrent ILA_CMD_ADD commands.\n\nAdd a mutex to make sure at most one thread is calling nf_register_net_hooks().\n\n[1]\n BUG: KASAN: slab-use-after-free in rht_key_hashfn include/linux/rhashtable.h:159 [inline]\n BUG: KASAN: slab-use-after-free in __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h:604\nRead of size 4 at addr ffff888028f40008 by task dhcpcd/5501\n\nCPU: 1 UID: 0 PID: 5501 Comm: dhcpcd Not tainted 6.13.0-rc4-syzkaller-00054-gd6ef8b40d075 #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/13/2024\nCall Trace:\n <IRQ>\n  __dump_stack lib/dump_stack.c:94 [inline]\n  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120\n  print_address_description mm/kasan/report.c:378 [inline]\n  print_report+0xc3/0x620 mm/kasan/report.c:489\n  kasan_report+0xd9/0x110 mm/kasan/report.c:602\n  rht_key_hashfn include/linux/rhashtable.h:159 [inline]\n  __rhashtable_lookup.constprop.0+0x426/0x550 include/linux/rhashtable.h:604\n  rhashtable_lookup include/linux/rhashtable.h:646 [inline]\n  rhashtable_lookup_fast include/linux/rhashtable.h:672 [inline]\n  ila_lookup_wildcards net/ipv6/ila/ila_xlat.c:127 [inline]\n  ila_xlat_addr net/ipv6/ila/ila_xlat.c:652 [inline]\n  ila_nf_input+0x1ee/0x620 net/ipv6/ila/ila_xlat.c:185\n  nf_hook_entry_hookfn include/linux/netfilter.h:154 [inline]\n  nf_hook_slow+0xbb/0x200 net/netfilter/core.c:626\n  nf_hook.constprop.0+0x42e/0x750 include/linux/netfilter.h:269\n  NF_HOOK include/linux/netfilter.h:312 [inline]\n  ipv6_rcv+0xa4/0x680 net/ipv6/ip6_input.c:309\n  __netif_receive_skb_one_core+0x12e/0x1e0 net/core/dev.c:5672\n  __netif_receive_skb+0x1d/0x160 net/core/dev.c:5785\n  process_backlog+0x443/0x15f0 net/core/dev.c:6117\n  __napi_poll.constprop.0+0xb7/0x550 net/core/dev.c:6883\n  napi_poll net/core/dev.c:6952 [inline]\n  net_rx_action+0xa94/0x1010 net/core/dev.c:7074\n  handle_softirqs+0x213/0x8f0 kernel/softirq.c:561\n  __do_softirq kernel/softirq.c:595 [inline]\n  invoke_softirq kernel/softirq.c:435 [inline]\n  __irq_exit_rcu+0x109/0x170 kernel/softirq.c:662\n  irq_exit_rcu+0x9/0x30 kernel/softirq.c:678\n  instr_sysvec_apic_timer_interrupt arch/x86/kernel/apic/apic.c:1049 [inline]\n  sysvec_apic_timer_interrupt+0xa4/0xc0 arch/x86/kernel/apic/apic.c:1049",
            "fix_available": false
          },
          {
            "id": "CVE-2024-57982",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: xfrm: state: fix out-of-bounds read during lookup",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nxfrm: state: fix out-of-bounds read during lookup\n\nlookup and resize can run in parallel.\n\nThe xfrm_state_hash_generation seqlock ensures a retry, but the hash\nfunctions can observe a hmask value that is too large for the new hlist\narray.\n\nrehash does:\n  rcu_assign_pointer(net->xfrm.state_bydst, ndst) [..]\n  net->xfrm.state_hmask = nhashmask;\n\nWhile state lookup does:\n  h = xfrm_dst_hash(net, daddr, saddr, tmpl->reqid, encap_family);\n  hlist_for_each_entry_rcu(x, net->xfrm.state_bydst + h, bydst) {\n\nThis is only safe in case the update to state_bydst is larger than\nnet->xfrm.xfrm_state_hmask (or if the lookup function gets\nserialized via state spinlock again).\n\nFix this by prefetching state_hmask and the associated pointers.\nThe xfrm_state_hash_generation seqlock retry will ensure that the pointer\nand the hmask will be consistent.\n\nThe existing helpers, like xfrm_dst_hash(), are now unsafe for RCU side,\nadd lockdep assertions to document that they are only safe for insert\nside.\n\nxfrm_state_lookup_byaddr() uses the spinlock rather than RCU.\nAFAICS this is an oversight from back when state lookup was converted to\nRCU, this lock should be replaced with RCU in a future patch.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-57984",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: i3c: dw: Fix use-after-free in dw_i3c_master driver due to race condition",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ni3c: dw: Fix use-after-free in dw_i3c_master driver due to race condition\n\nIn dw_i3c_common_probe, &master->hj_work is bound with\ndw_i3c_hj_work. And dw_i3c_master_irq_handler can call\ndw_i3c_master_irq_handle_ibis function to start the work.\n\nIf we remove the module which will call dw_i3c_common_remove to\nmake cleanup, it will free master->base through i3c_master_unregister\nwhile the work mentioned above will be used. The sequence of operations\nthat may lead to a UAF bug is as follows:\n\nCPU0                                      CPU1\n\n                                     | dw_i3c_hj_work\ndw_i3c_common_remove                 |\ni3c_master_unregister(&master->base) |\ndevice_unregister(&master->dev)      |\ndevice_release                       |\n//free master->base                  |\n                                     | i3c_master_do_daa(&master->base)\n                                     | //use master->base\n\nFix it by ensuring that the work is canceled before proceeding with\nthe cleanup in dw_i3c_common_remove.",
            "fix_available": false
          },
          {
            "id": "CVE-2024-58002",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: media: uvcvideo: Remove dangling pointers",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmedia: uvcvideo: Remove dangling pointers\n\nWhen an async control is written, we copy a pointer to the file handle\nthat started the operation. That pointer will be used when the device is\ndone. Which could be anytime in the future.\n\nIf the user closes that file descriptor, its structure will be freed,\nand there will be one dangling pointer per pending async control, that\nthe driver will try to use.\n\nClean all the dangling pointers during release().\n\nTo avoid adding a performance penalty in the most common case (no async\noperation), a counter has been introduced with some logic to make sure\nthat it is properly handled.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-21702",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: pfifo_tail_enqueue: Drop new packet when sch->limit == 0",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\npfifo_tail_enqueue: Drop new packet when sch->limit == 0\n\nExpected behaviour:\nIn case we reach scheduler's limit, pfifo_tail_enqueue() will drop a\npacket in scheduler's queue and decrease scheduler's qlen by one.\nThen, pfifo_tail_enqueue() enqueue new packet and increase\nscheduler's qlen by one. Finally, pfifo_tail_enqueue() return\n`NET_XMIT_CN` status code.\n\nWeird behaviour:\nIn case we set `sch->limit == 0` and trigger pfifo_tail_enqueue() on a\nscheduler that has no packet, the 'drop a packet' step will do nothing.\nThis means the scheduler's qlen still has value equal 0.\nThen, we continue to enqueue new packet and increase scheduler's qlen by\none. In summary, we can leverage pfifo_tail_enqueue() to increase qlen by\none and return `NET_XMIT_CN` status code.\n\nThe problem is:\nLet's say we have two qdiscs: Qdisc_A and Qdisc_B.\n - Qdisc_A's type must have '->graft()' function to create parent/child relationship.\n   Let's say Qdisc_A's type is `hfsc`. Enqueue packet to this qdisc will trigger `hfsc_enqueue`.\n - Qdisc_B's type is pfifo_head_drop. Enqueue packet to this qdisc will trigger `pfifo_tail_enqueue`.\n - Qdisc_B is configured to have `sch->limit == 0`.\n - Qdisc_A is configured to route the enqueued's packet to Qdisc_B.\n\nEnqueue packet through Qdisc_A will lead to:\n - hfsc_enqueue(Qdisc_A) -> pfifo_tail_enqueue(Qdisc_B)\n - Qdisc_B->q.qlen += 1\n - pfifo_tail_enqueue() return `NET_XMIT_CN`\n - hfsc_enqueue() check for `NET_XMIT_SUCCESS` and see `NET_XMIT_CN` => hfsc_enqueue() don't increase qlen of Qdisc_A.\n\nThe whole process lead to a situation where Qdisc_A->q.qlen == 0 and Qdisc_B->q.qlen == 1.\nReplace 'hfsc' with other type (for example: 'drr') still lead to the same problem.\nThis violate the design where parent's qlen should equal to the sum of its childrens'qlen.\n\nBug impact: This issue can be used for user->kernel privilege escalation when it is reachable.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-21855",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: ibmvnic: Don't reference skb after sending to VIOS",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nibmvnic: Don't reference skb after sending to VIOS\n\nPreviously, after successfully flushing the xmit buffer to VIOS,\nthe tx_bytes stat was incremented by the length of the skb.\n\nIt is invalid to access the skb memory after sending the buffer to\nthe VIOS because, at any point after sending, the VIOS can trigger\nan interrupt to free this memory. A race between reading skb->len\nand freeing the skb is possible (especially during LPM) and will\nresult in use-after-free:\n ==================================================================\n BUG: KASAN: slab-use-after-free in ibmvnic_xmit+0x75c/0x1808 [ibmvnic]\n Read of size 4 at addr c00000024eb48a70 by task hxecom/14495\n <...>\n Call Trace:\n [c000000118f66cf0] [c0000000018cba6c] dump_stack_lvl+0x84/0xe8 (unreliable)\n [c000000118f66d20] [c0000000006f0080] print_report+0x1a8/0x7f0\n [c000000118f66df0] [c0000000006f08f0] kasan_report+0x128/0x1f8\n [c000000118f66f00] [c0000000006f2868] __asan_load4+0xac/0xe0\n [c000000118f66f20] [c0080000046eac84] ibmvnic_xmit+0x75c/0x1808 [ibmvnic]\n [c000000118f67340] [c0000000014be168] dev_hard_start_xmit+0x150/0x358\n <...>\n Freed by task 0:\n kasan_save_stack+0x34/0x68\n kasan_save_track+0x2c/0x50\n kasan_save_free_info+0x64/0x108\n __kasan_mempool_poison_object+0x148/0x2d4\n napi_skb_cache_put+0x5c/0x194\n net_tx_action+0x154/0x5b8\n handle_softirqs+0x20c/0x60c\n do_softirq_own_stack+0x6c/0x88\n <...>\n The buggy address belongs to the object at c00000024eb48a00 which\n  belongs to the cache skbuff_head_cache of size 224\n==================================================================",
            "fix_available": false
          },
          {
            "id": "CVE-2025-21858",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: geneve: Fix use-after-free in geneve_find_dev().",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ngeneve: Fix use-after-free in geneve_find_dev().\n\nsyzkaller reported a use-after-free in geneve_find_dev() [0]\nwithout repro.\n\ngeneve_configure() links struct geneve_dev.next to\nnet_generic(net, geneve_net_id)->geneve_list.\n\nThe net here could differ from dev_net(dev) if IFLA_NET_NS_PID,\nIFLA_NET_NS_FD, or IFLA_TARGET_NETNSID is set.\n\nWhen dev_net(dev) is dismantled, geneve_exit_batch_rtnl() finally\ncalls unregister_netdevice_queue() for each dev in the netns,\nand later the dev is freed.\n\nHowever, its geneve_dev.next is still linked to the backend UDP\nsocket netns.\n\nThen, use-after-free will occur when another geneve dev is created\nin the netns.\n\nLet's call geneve_dellink() instead in geneve_destroy_tunnels().\n\n[0]:\nBUG: KASAN: slab-use-after-free in geneve_find_dev drivers/net/geneve.c:1295 [inline]\nBUG: KASAN: slab-use-after-free in geneve_configure+0x234/0x858 drivers/net/geneve.c:1343\nRead of size 2 at addr ffff000054d6ee24 by task syz.1.4029/13441\n\nCPU: 1 UID: 0 PID: 13441 Comm: syz.1.4029 Not tainted 6.13.0-g0ad9617c78ac #24 dc35ca22c79fb82e8e7bc5c9c9adafea898b1e3d\nHardware name: linux,dummy-virt (DT)\nCall trace:\n show_stack+0x38/0x50 arch/arm64/kernel/stacktrace.c:466 (C)\n __dump_stack lib/dump_stack.c:94 [inline]\n dump_stack_lvl+0xbc/0x108 lib/dump_stack.c:120\n print_address_description mm/kasan/report.c:378 [inline]\n print_report+0x16c/0x6f0 mm/kasan/report.c:489\n kasan_report+0xc0/0x120 mm/kasan/report.c:602\n __asan_report_load2_noabort+0x20/0x30 mm/kasan/report_generic.c:379\n geneve_find_dev drivers/net/geneve.c:1295 [inline]\n geneve_configure+0x234/0x858 drivers/net/geneve.c:1343\n geneve_newlink+0xb8/0x128 drivers/net/geneve.c:1634\n rtnl_newlink_create+0x23c/0x868 net/core/rtnetlink.c:3795\n __rtnl_newlink net/core/rtnetlink.c:3906 [inline]\n rtnl_newlink+0x1054/0x1630 net/core/rtnetlink.c:4021\n rtnetlink_rcv_msg+0x61c/0x918 net/core/rtnetlink.c:6911\n netlink_rcv_skb+0x1dc/0x398 net/netlink/af_netlink.c:2543\n rtnetlink_rcv+0x34/0x50 net/core/rtnetlink.c:6938\n netlink_unicast_kernel net/netlink/af_netlink.c:1322 [inline]\n netlink_unicast+0x618/0x838 net/netlink/af_netlink.c:1348\n netlink_sendmsg+0x5fc/0x8b0 net/netlink/af_netlink.c:1892\n sock_sendmsg_nosec net/socket.c:713 [inline]\n __sock_sendmsg net/socket.c:728 [inline]\n ____sys_sendmsg+0x410/0x6f8 net/socket.c:2568\n ___sys_sendmsg+0x178/0x1d8 net/socket.c:2622\n __sys_sendmsg net/socket.c:2654 [inline]\n __do_sys_sendmsg net/socket.c:2659 [inline]\n __se_sys_sendmsg net/socket.c:2657 [inline]\n __arm64_sys_sendmsg+0x12c/0x1c8 net/socket.c:2657\n __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]\n invoke_syscall+0x90/0x278 arch/arm64/kernel/syscall.c:49\n el0_svc_common+0x13c/0x250 arch/arm64/kernel/syscall.c:132\n do_el0_svc+0x54/0x70 arch/arm64/kernel/syscall.c:151\n el0_svc+0x4c/0xa8 arch/arm64/kernel/entry-common.c:744\n el0t_64_sync_handler+0x78/0x108 arch/arm64/kernel/entry-common.c:762\n el0t_64_sync+0x198/0x1a0 arch/arm64/kernel/entry.S:600\n\nAllocated by task 13247:\n kasan_save_stack mm/kasan/common.c:47 [inline]\n kasan_save_track+0x30/0x68 mm/kasan/common.c:68\n kasan_save_alloc_info+0x44/0x58 mm/kasan/generic.c:568\n poison_kmalloc_redzone mm/kasan/common.c:377 [inline]\n __kasan_kmalloc+0x84/0xa0 mm/kasan/common.c:394\n kasan_kmalloc include/linux/kasan.h:260 [inline]\n __do_kmalloc_node mm/slub.c:4298 [inline]\n __kmalloc_node_noprof+0x2a0/0x560 mm/slub.c:4304\n __kvmalloc_node_noprof+0x9c/0x230 mm/util.c:645\n alloc_netdev_mqs+0xb8/0x11a0 net/core/dev.c:11470\n rtnl_create_link+0x2b8/0xb50 net/core/rtnetlink.c:3604\n rtnl_newlink_create+0x19c/0x868 net/core/rtnetlink.c:3780\n __rtnl_newlink net/core/rtnetlink.c:3906 [inline]\n rtnl_newlink+0x1054/0x1630 net/core/rtnetlink.c:4021\n rtnetlink_rcv_msg+0x61c/0x918 net/core/rtnetlink.c:6911\n netlink_rcv_skb+0x1dc/0x398 net/netlink/af_netlink.c:2543\n rtnetlink_rcv+0x34/0x50 net/core/rtnetlink.c:6938\n netlink_unicast_kernel net/netlink/af_n\n---truncated---",
            "fix_available": false
          },
          {
            "id": "CVE-2025-21863",
            "package": "linux-libc-dev",
            "installed_version": "6.1.129-1",
            "fixed_version": null,
            "title": "kernel: io_uring: prevent opcode speculation",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nio_uring: prevent opcode speculation\n\nsqe->opcode is used for different tables, make sure we santitise it\nagainst speculations.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-31484",
            "package": "perl",
            "installed_version": "5.36.0-7+deb12u1",
            "fixed_version": null,
            "title": "perl: CPAN.pm does not verify TLS certificates when downloading distributions over HTTPS",
            "description": "CPAN.pm before 2.35 does not verify TLS certificates when downloading distributions over HTTPS.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-31484",
            "package": "perl-base",
            "installed_version": "5.36.0-7+deb12u1",
            "fixed_version": null,
            "title": "perl: CPAN.pm does not verify TLS certificates when downloading distributions over HTTPS",
            "description": "CPAN.pm before 2.35 does not verify TLS certificates when downloading distributions over HTTPS.",
            "fix_available": false
          },
          {
            "id": "CVE-2023-31484",
            "package": "perl-modules-5.36",
            "installed_version": "5.36.0-7+deb12u1",
            "fixed_version": null,
            "title": "perl: CPAN.pm does not verify TLS certificates when downloading distributions over HTTPS",
            "description": "CPAN.pm before 2.35 does not verify TLS certificates when downloading distributions over HTTPS.",
            "fix_available": false
          },
          {
            "id": "CVE-2025-31115",
            "package": "xz-utils",
            "installed_version": "5.4.1-0.2",
            "fixed_version": "5.4.1-1",
            "title": "xz: XZ has a heap-use-after-free bug in threaded .xz decoder",
            "description": "XZ Utils provide a general-purpose data-compression library plus command-line tools. In XZ Utils 5.3.3alpha to 5.8.0, the multithreaded .xz decoder in liblzma has a bug where invalid input can at least result in a crash. The effects include heap use after free and writing to an address based on the null pointer plus an offset. Applications and libraries that use the lzma_stream_decoder_mt function are affected. The bug has been fixed in XZ Utils 5.8.1, and the fix has been committed to the v5.4, v5.6, v5.8, and master branches in the xz Git repository. No new release packages will be made from the old stable branches, but a standalone patch is available that applies to all affected releases.",
            "fix_available": true
          },
          {
            "id": "CVE-2024-6345",
            "package": "setuptools",
            "installed_version": "65.5.1",
            "fixed_version": "70.0.0",
            "title": "pypa/setuptools: Remote code execution via download functions in the package_index module in pypa/setuptools",
            "description": "A vulnerability in the package_index module of pypa/setuptools versions up to 69.1.1 allows for remote code execution via its download functions. These functions, which are used to download packages from URLs provided by users or retrieved from package index servers, are susceptible to code injection. If these functions are exposed to user-controlled inputs, such as package URLs, they can execute arbitrary commands on the system. The issue is fixed in version 70.0.",
            "fix_available": true
          }
        ]
      },
      "api_security": {
        "overall_score": 0,
        "file_stats": {
          "total_files": 7,
          "server_files": 1,
          "route_files": 0,
          "auth_files": 0,
          "config_files": 0,
          "middleware_files": 0,
          "error_handling_files": 0,
          "input_validation_files": 0,
          "tls_files": 0
        },
        "authentication": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No authentication files found"
          ],
          "recommendations": [
            "Implement proper authentication"
          ]
        },
        "rate_limiting": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No rate limiting implementation found"
          ],
          "recommendations": [
            "Implement rate limiting to protect against abuse"
          ]
        },
        "input_validation": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No input validation implementation found"
          ],
          "recommendations": [
            "Implement input validation to prevent injection attacks"
          ]
        },
        "error_handling": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No error handling implementation found"
          ],
          "recommendations": [
            "Implement proper error handling to prevent information disclosure"
          ]
        },
        "https_tls": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No HTTPS/TLS implementation found"
          ],
          "recommendations": [
            "Implement HTTPS/TLS to secure communications"
          ]
        }
      },
      "mcp_security": {
        "overall_score": 2.4,
        "overall_risk_level": "high",
        "top_findings": [
          "[input_validation] No standard input validation libraries detected",
          "[input_validation] No input sanitization mechanisms detected",
          "[input_validation] No type checking detected",
          "[input_validation] No input length validation detected",
          "[input_validation] No error handling for invalid input detected"
        ],
        "top_recommendations": [
          "[input_validation] Implement JSON Schema, Pydantic, or another validation library",
          "[input_validation] Implement input sanitization for all user-provided data",
          "[input_validation] Implement type checking for function parameters and return values",
          "[input_validation] Implement input length validation to prevent buffer overflows and DoS attacks",
          "[input_validation] Implement proper error handling for invalid input"
        ],
        "detailed_results": {
          "tool_poisoning": {
            "score": 4,
            "risk_level": "medium",
            "findings": [
              "No mechanism to verify tool sources or integrity",
              "No tool isolation mechanisms detected"
            ],
            "recommendations": [
              "Implement tool signature verification or hash checking",
              "Implement sandboxing or containerization for tool execution"
            ]
          },
          "input_validation": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard input validation libraries detected",
              "No input sanitization mechanisms detected",
              "No type checking detected",
              "No input length validation detected",
              "No error handling for invalid input detected",
              "No input format validation detected"
            ],
            "recommendations": [
              "Implement JSON Schema, Pydantic, or another validation library",
              "Implement input sanitization for all user-provided data",
              "Implement type checking for function parameters and return values",
              "Implement input length validation to prevent buffer overflows and DoS attacks",
              "Implement proper error handling for invalid input",
              "Implement format validation using regular expressions or other methods"
            ]
          },
          "authentication": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard authentication libraries detected",
              "No evidence of HTTPS enforcement",
              "No secure storage mechanisms detected",
              "No CSRF protection detected",
              "No session management detected",
              "No multi-factor authentication support detected"
            ],
            "recommendations": [
              "Implement JWT, OAuth, or another standard authentication mechanism",
              "Enforce HTTPS for all connections",
              "Use proper hashing and encryption for sensitive data",
              "Implement CSRF protection",
              "Implement secure session management",
              "Consider implementing MFA for sensitive operations"
            ]
          },
          "data_exfiltration": {
            "score": 5,
            "risk_level": "medium",
            "findings": [
              "No evidence of data minimization or sanitization before processing",
              "No detection or notification mechanisms for suspicious activities"
            ],
            "recommendations": [
              "Implement data minimization to reduce sensitive data exposure",
              "Implement monitoring and alerting for suspicious data access patterns"
            ]
          },
          "dependency_security": {
            "score": 3,
            "risk_level": "medium",
            "findings": [
              "No dependency lock files found",
              "No dependency scanning tools detected",
              "No license file found"
            ],
            "recommendations": [
              "Use lock files to pin dependency versions",
              "Implement Dependabot, Snyk, or another dependency scanning tool",
              "Add a license file and ensure all dependencies have compatible licenses"
            ]
          }
        }
      }
    },
    {
      "repo_url": "https://github.com/Adfin-Engineering/mcp-server-adfin",
      "name": "Adfin",
      "api_security": {
        "overall_score": 0,
        "file_stats": {
          "total_files": 9,
          "server_files": 0,
          "route_files": 0,
          "auth_files": 0,
          "config_files": 0,
          "middleware_files": 0,
          "error_handling_files": 0,
          "input_validation_files": 0,
          "tls_files": 0
        },
        "authentication": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No authentication files found"
          ],
          "recommendations": [
            "Implement proper authentication"
          ]
        },
        "rate_limiting": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No rate limiting implementation found"
          ],
          "recommendations": [
            "Implement rate limiting to protect against abuse"
          ]
        },
        "input_validation": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No input validation implementation found"
          ],
          "recommendations": [
            "Implement input validation to prevent injection attacks"
          ]
        },
        "error_handling": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No error handling implementation found"
          ],
          "recommendations": [
            "Implement proper error handling to prevent information disclosure"
          ]
        },
        "https_tls": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No HTTPS/TLS implementation found"
          ],
          "recommendations": [
            "Implement HTTPS/TLS to secure communications"
          ]
        }
      },
      "mcp_security": {
        "overall_score": 2.4,
        "overall_risk_level": "high",
        "top_findings": [
          "[input_validation] No standard input validation libraries detected",
          "[input_validation] No input sanitization mechanisms detected",
          "[input_validation] No type checking detected",
          "[input_validation] No input length validation detected",
          "[input_validation] No error handling for invalid input detected"
        ],
        "top_recommendations": [
          "[input_validation] Implement JSON Schema, Pydantic, or another validation library",
          "[input_validation] Implement input sanitization for all user-provided data",
          "[input_validation] Implement type checking for function parameters and return values",
          "[input_validation] Implement input length validation to prevent buffer overflows and DoS attacks",
          "[input_validation] Implement proper error handling for invalid input"
        ],
        "detailed_results": {
          "tool_poisoning": {
            "score": 4,
            "risk_level": "medium",
            "findings": [
              "No mechanism to verify tool sources or integrity",
              "No tool isolation mechanisms detected"
            ],
            "recommendations": [
              "Implement tool signature verification or hash checking",
              "Implement sandboxing or containerization for tool execution"
            ]
          },
          "input_validation": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard input validation libraries detected",
              "No input sanitization mechanisms detected",
              "No type checking detected",
              "No input length validation detected",
              "No error handling for invalid input detected",
              "No input format validation detected"
            ],
            "recommendations": [
              "Implement JSON Schema, Pydantic, or another validation library",
              "Implement input sanitization for all user-provided data",
              "Implement type checking for function parameters and return values",
              "Implement input length validation to prevent buffer overflows and DoS attacks",
              "Implement proper error handling for invalid input",
              "Implement format validation using regular expressions or other methods"
            ]
          },
          "authentication": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard authentication libraries detected",
              "No evidence of HTTPS enforcement",
              "No secure storage mechanisms detected",
              "No CSRF protection detected",
              "No session management detected",
              "No multi-factor authentication support detected"
            ],
            "recommendations": [
              "Implement JWT, OAuth, or another standard authentication mechanism",
              "Enforce HTTPS for all connections",
              "Use proper hashing and encryption for sensitive data",
              "Implement CSRF protection",
              "Implement secure session management",
              "Consider implementing MFA for sensitive operations"
            ]
          },
          "data_exfiltration": {
            "score": 5,
            "risk_level": "medium",
            "findings": [
              "No evidence of data minimization or sanitization before processing",
              "No detection or notification mechanisms for suspicious activities"
            ],
            "recommendations": [
              "Implement data minimization to reduce sensitive data exposure",
              "Implement monitoring and alerting for suspicious data access patterns"
            ]
          },
          "dependency_security": {
            "score": 3,
            "risk_level": "medium",
            "findings": [
              "No dependency lock files found",
              "No dependency scanning tools detected",
              "No license file found"
            ],
            "recommendations": [
              "Use lock files to pin dependency versions",
              "Implement Dependabot, Snyk, or another dependency scanning tool",
              "Add a license file and ensure all dependencies have compatible licenses"
            ]
          }
        }
      }
    },
    {
      "repo_url": "https://github.com/tinyfish-io/agentql-mcp",
      "name": "AgentQL",
      "container_security": {
        "base_image": {
          "name": "node:18-alpine",
          "provenance": "Official (Docker Hub)",
          "tag_type": "specific_version",
          "tag": "18-alpine",
          "tag_specificity": "Low",
          "last_updated": "2025-03-27T18:38:34.907693Z",
          "age_days": 9,
          "freshness_rating": "Recent",
          "runs_as_root": true,
          "user": "root"
        },
        "vulnerability_summary": {
          "critical_count": 0,
          "high_count": 1,
          "total_count": 1,
          "fixable_count": 1
        },
        "critical_vulnerabilities": [],
        "high_vulnerabilities": [
          {
            "id": "CVE-2024-21538",
            "package": "cross-spawn",
            "installed_version": "7.0.3",
            "fixed_version": "7.0.5, 6.0.6",
            "title": "cross-spawn: regular expression denial of service",
            "description": "Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.",
            "fix_available": true
          }
        ]
      },
      "api_security": {
        "overall_score": 0,
        "file_stats": {
          "total_files": 21,
          "server_files": 1,
          "route_files": 0,
          "auth_files": 1,
          "config_files": 1,
          "middleware_files": 0,
          "error_handling_files": 0,
          "input_validation_files": 0,
          "tls_files": 0
        },
        "authentication": {
          "score": 8,
          "mechanism": "API Token (Snyk Token)",
          "findings": [
            "The workflow uses an API token (`SNYK_TOKEN`) to authenticate with the Snyk service.",
            "The token is passed to the Snyk CLI via an environment variable.",
            "The implementation correctly uses GitHub Secrets (`${{ secrets.SNYK_TOKEN }}`) to store and access the API token, which prevents hardcoding credentials directly in the workflow file.",
            "GitHub Secrets provide secure, encrypted storage for sensitive values like API tokens.",
            "The workflow itself does not perform token validation; it relies on the Snyk CLI tool to validate the token against the Snyk service.",
            "The provided code snippet does not contain information about the token's expiration policy or if refresh mechanisms are applicable/used for Snyk tokens (API tokens typically require manual or programmatic rotation rather than refresh tokens)."
          ],
          "recommendations": [
            "Ensure the `SNYK_TOKEN` stored in GitHub Secrets adheres to the principle of least privilege, granting only the permissions necessary for the `snyk code test` command.",
            "Implement a regular rotation policy for the `SNYK_TOKEN` within Snyk and update the corresponding GitHub Secret.",
            "Monitor Snyk account activity and GitHub Actions logs for any signs of unauthorized use or potential token compromise.",
            "Ensure the GitHub Secret `SNYK_TOKEN` is scoped appropriately (e.g., repository-level if only needed here, or organization-level if shared) to limit potential exposure."
          ]
        },
        "rate_limiting": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No rate limiting implementation found"
          ],
          "recommendations": [
            "Implement rate limiting to protect against abuse"
          ]
        },
        "input_validation": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No input validation implementation found"
          ],
          "recommendations": [
            "Implement input validation to prevent injection attacks"
          ]
        },
        "error_handling": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No error handling implementation found"
          ],
          "recommendations": [
            "Implement proper error handling to prevent information disclosure"
          ]
        },
        "https_tls": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No HTTPS/TLS implementation found"
          ],
          "recommendations": [
            "Implement HTTPS/TLS to secure communications"
          ]
        }
      },
      "mcp_security": {
        "overall_score": 2.4,
        "overall_risk_level": "high",
        "top_findings": [
          "[input_validation] No standard input validation libraries detected",
          "[input_validation] No input sanitization mechanisms detected",
          "[input_validation] No type checking detected",
          "[input_validation] No input length validation detected",
          "[input_validation] No error handling for invalid input detected"
        ],
        "top_recommendations": [
          "[input_validation] Implement JSON Schema, Pydantic, or another validation library",
          "[input_validation] Implement input sanitization for all user-provided data",
          "[input_validation] Implement type checking for function parameters and return values",
          "[input_validation] Implement input length validation to prevent buffer overflows and DoS attacks",
          "[input_validation] Implement proper error handling for invalid input"
        ],
        "detailed_results": {
          "tool_poisoning": {
            "score": 4,
            "risk_level": "medium",
            "findings": [
              "No mechanism to verify tool sources or integrity",
              "No tool isolation mechanisms detected"
            ],
            "recommendations": [
              "Implement tool signature verification or hash checking",
              "Implement sandboxing or containerization for tool execution"
            ]
          },
          "input_validation": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard input validation libraries detected",
              "No input sanitization mechanisms detected",
              "No type checking detected",
              "No input length validation detected",
              "No error handling for invalid input detected",
              "No input format validation detected"
            ],
            "recommendations": [
              "Implement JSON Schema, Pydantic, or another validation library",
              "Implement input sanitization for all user-provided data",
              "Implement type checking for function parameters and return values",
              "Implement input length validation to prevent buffer overflows and DoS attacks",
              "Implement proper error handling for invalid input",
              "Implement format validation using regular expressions or other methods"
            ]
          },
          "authentication": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard authentication libraries detected",
              "No evidence of HTTPS enforcement",
              "No secure storage mechanisms detected",
              "No CSRF protection detected",
              "No session management detected",
              "No multi-factor authentication support detected"
            ],
            "recommendations": [
              "Implement JWT, OAuth, or another standard authentication mechanism",
              "Enforce HTTPS for all connections",
              "Use proper hashing and encryption for sensitive data",
              "Implement CSRF protection",
              "Implement secure session management",
              "Consider implementing MFA for sensitive operations"
            ]
          },
          "data_exfiltration": {
            "score": 5,
            "risk_level": "medium",
            "findings": [
              "No evidence of data minimization or sanitization before processing",
              "No detection or notification mechanisms for suspicious activities"
            ],
            "recommendations": [
              "Implement data minimization to reduce sensitive data exposure",
              "Implement monitoring and alerting for suspicious data access patterns"
            ]
          },
          "dependency_security": {
            "score": 3,
            "risk_level": "medium",
            "findings": [
              "No dependency lock files found",
              "No dependency scanning tools detected",
              "No license file found"
            ],
            "recommendations": [
              "Use lock files to pin dependency versions",
              "Implement Dependabot, Snyk, or another dependency scanning tool",
              "Add a license file and ensure all dependencies have compatible licenses"
            ]
          }
        }
      }
    },
    {
      "repo_url": "https://github.com/agentrpc/agentrpc",
      "name": "AgentRPC",
      "api_security": {
        "overall_score": 0,
        "file_stats": {
          "total_files": 127,
          "server_files": 1,
          "route_files": 2,
          "auth_files": 0,
          "config_files": 4,
          "middleware_files": 0,
          "error_handling_files": 5,
          "input_validation_files": 0,
          "tls_files": 0
        },
        "authentication": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No authentication files found"
          ],
          "recommendations": [
            "Implement proper authentication"
          ]
        },
        "rate_limiting": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No rate limiting implementation found"
          ],
          "recommendations": [
            "Implement rate limiting to protect against abuse"
          ]
        },
        "input_validation": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No input validation implementation found"
          ],
          "recommendations": [
            "Implement input validation to prevent injection attacks"
          ]
        },
        "error_handling": {
          "score": 3,
          "mechanism": "The primary error handling mechanisms observed are:\n1.  **Custom Error Classes:** Both Python (`AgentRPCError`) and Node.js (`AgentRPCError`, `PollTimeoutError`, `AgentRPCAPIError`, `AnimalError`) define custom exception classes inheriting from base Error/Exception types. This allows for specific error types within the SDKs.\n2.  **Error Serialization:** The Node.js SDK utilizes a dedicated serialization utility (`serialize-error.js`) to convert Error objects into plain JavaScript objects suitable for transmission (e.g., via RPC/JSON). This utility handles various error properties, including stack traces, and circular references.\n3.  **Implicit Framework Handling:** The test file (`errors.test.ts`) demonstrates that errors thrown within registered handlers (`getNormalAnimal`, `getCustomAnimal`) are caught by the surrounding framework/RPC layer. This layer then uses the serialization mechanism to format the error and includes it in the response body under a `result` field with `resultType: \"rejection\"`.",
          "findings": [
            {
              "id": "INFO_DISCLOSURE_MESSAGES",
              "severity": "Medium",
              "description": "Error messages (`message`) and error names (`name`) are included in the client-facing response (as seen in `errors.test.ts`). While `name` might be acceptable, detailed messages can leak internal implementation details or potentially sensitive information, especially with `AgentRPCAPIError` which concatenates response data into the message."
            },
            {
              "id": "STACK_TRACE_EXPOSURE",
              "severity": "High",
              "description": "The `serialize-error.js` utility explicitly includes the `stack` property in the serialized error object (`commonProperties`). If this full serialized object is returned to the client (even if the test only checks for `name` and `message`), it exposes stack traces, a significant security vulnerability revealing file paths, function names, and code structure."
            },
            {
              "id": "INCONSISTENT_ERROR_FORMAT",
              "severity": "Low",
              "description": "The defined error classes in Python (`status_code`, `response`) and Node.js (`meta`) have different structures. While the final *tested* response format (`{ name, message }`) seems somewhat normalized by the framework, the underlying error objects and the full serialized object have inconsistencies."
            },
            {
              "id": "MISSING_ERROR_LOGGING",
              "severity": "Medium",
              "description": "There is no evidence of server-side error logging in the provided code snippets. Relying solely on returning errors to the client hinders debugging, monitoring, and auditing."
            },
            {
              "id": "IMPROPER_HTTP_STATUS_CODE",
              "severity": "Medium",
              "description": "The test (`errors.test.ts`) shows that API calls resulting in an error (`resultType: \"rejection\"`) still return an HTTP `200 OK` status code. This violates REST principles, making it harder for clients (and monitoring tools) to distinguish between successful and failed operations at the HTTP level."
            },
            {
              "id": "LACK_OF_GRACEFUL_DEGRADATION",
              "severity": "Low",
              "description": "The error handling simply catches and reports errors. No mechanisms for graceful degradation (e.g., returning partial data, falling back to defaults, retrying internally) are apparent in the provided code."
            }
          ],
          "recommendations": [
            {
              "id": "PREVENT_STACK_TRACE_LEAK",
              "action": "Modify the error handling pipeline (either `serializeError` usage or the framework layer consuming its output) to ensure stack traces (`stack`) are *never* included in responses sent to the client, especially in production environments. Log them server-side instead."
            },
            {
              "id": "GENERIC_CLIENT_ERRORS",
              "action": "Return generic, user-friendly error messages to the client. Avoid exposing internal details like specific function names, library errors, or raw response data (review `AgentRPCAPIError`). Log detailed error information server-side for debugging."
            },
            {
              "id": "IMPLEMENT_SERVER_LOGGING",
              "action": "Implement comprehensive server-side logging for all caught exceptions. Include relevant context (e.g., request ID, timestamp, user context if available) and the full error details (including stack trace)."
            },
            {
              "id": "USE_CORRECT_HTTP_STATUS",
              "action": "Return appropriate HTTP status codes based on the error type. Use `4xx` codes for client-side errors (e.g., invalid input, authentication failure) and `5xx` codes for server-side errors (e.g., unhandled exceptions, downstream service failures). Avoid returning `200 OK` for failed operations."
            },
            {
              "id": "STANDARDIZE_ERROR_RESPONSE",
              "action": "Define and enforce a consistent error response schema across all SDKs and API endpoints. Consider adopting a standard like RFC 7807 Problem Details for HTTP APIs."
            },
            {
              "id": "CONSIDER_GRACEFUL_DEGRADATION",
              "action": "Where appropriate, implement strategies for graceful degradation to improve resilience, such as retries (with backoff), circuit breakers, or returning cached/partial results when parts of the operation fail."
            }
          ]
        },
        "https_tls": {
          "score": 0,
          "mechanism": "unknown",
          "findings": [
            "No HTTPS/TLS implementation found"
          ],
          "recommendations": [
            "Implement HTTPS/TLS to secure communications"
          ]
        }
      },
      "mcp_security": {
        "overall_score": 2.4,
        "overall_risk_level": "high",
        "top_findings": [
          "[input_validation] No standard input validation libraries detected",
          "[input_validation] No input sanitization mechanisms detected",
          "[input_validation] No type checking detected",
          "[input_validation] No input length validation detected",
          "[input_validation] No error handling for invalid input detected"
        ],
        "top_recommendations": [
          "[input_validation] Implement JSON Schema, Pydantic, or another validation library",
          "[input_validation] Implement input sanitization for all user-provided data",
          "[input_validation] Implement type checking for function parameters and return values",
          "[input_validation] Implement input length validation to prevent buffer overflows and DoS attacks",
          "[input_validation] Implement proper error handling for invalid input"
        ],
        "detailed_results": {
          "tool_poisoning": {
            "score": 4,
            "risk_level": "medium",
            "findings": [
              "No mechanism to verify tool sources or integrity",
              "No tool isolation mechanisms detected"
            ],
            "recommendations": [
              "Implement tool signature verification or hash checking",
              "Implement sandboxing or containerization for tool execution"
            ]
          },
          "input_validation": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard input validation libraries detected",
              "No input sanitization mechanisms detected",
              "No type checking detected",
              "No input length validation detected",
              "No error handling for invalid input detected",
              "No input format validation detected"
            ],
            "recommendations": [
              "Implement JSON Schema, Pydantic, or another validation library",
              "Implement input sanitization for all user-provided data",
              "Implement type checking for function parameters and return values",
              "Implement input length validation to prevent buffer overflows and DoS attacks",
              "Implement proper error handling for invalid input",
              "Implement format validation using regular expressions or other methods"
            ]
          },
          "authentication": {
            "score": 0,
            "risk_level": "high",
            "findings": [
              "No standard authentication libraries detected",
              "No evidence of HTTPS enforcement",
              "No secure storage mechanisms detected",
              "No CSRF protection detected",
              "No session management detected",
              "No multi-factor authentication support detected"
            ],
            "recommendations": [
              "Implement JWT, OAuth, or another standard authentication mechanism",
              "Enforce HTTPS for all connections",
              "Use proper hashing and encryption for sensitive data",
              "Implement CSRF protection",
              "Implement secure session management",
              "Consider implementing MFA for sensitive operations"
            ]
          },
          "data_exfiltration": {
            "score": 5,
            "risk_level": "medium",
            "findings": [
              "No evidence of data minimization or sanitization before processing",
              "No detection or notification mechanisms for suspicious activities"
            ],
            "recommendations": [
              "Implement data minimization to reduce sensitive data exposure",
              "Implement monitoring and alerting for suspicious data access patterns"
            ]
          },
          "dependency_security": {
            "score": 3,
            "risk_level": "medium",
            "findings": [
              "No dependency lock files found",
              "No dependency scanning tools detected",
              "No license file found"
            ],
            "recommendations": [
              "Use lock files to pin dependency versions",
              "Implement Dependabot, Snyk, or another dependency scanning tool",
              "Add a license file and ensure all dependencies have compatible licenses"
            ]
          }
        }
      }
    }
  ],
  "aggregated_stats": {
    "total_repos_scanned": 5,
    "repos_with_critical": 1,
    "repos_with_high": 2,
    "repos_using_latest_tag": 0,
    "repos_running_as_root": 3,
    "avg_image_age_days": 25.666666666666668,
    "most_common_vulnerabilities": [
      {
        "id": "CVE-2023-5841",
        "count": 2,
        "severity": "CRITICAL"
      },
      {
        "id": "CVE-2023-45853",
        "count": 2,
        "severity": "CRITICAL"
      },
      {
        "id": "CVE-2023-6879",
        "count": 1,
        "severity": "CRITICAL"
      },
      {
        "id": "CVE-2023-31484",
        "count": 4,
        "severity": "HIGH"
      },
      {
        "id": "CVE-2025-31115",
        "count": 3,
        "severity": "HIGH"
      }
    ],
    "most_vulnerable_base_images": [
      {
        "name": "python:3.10",
        "critical_count": 5,
        "high_count": 100
      },
      {
        "name": "node:18-alpine",
        "critical_count": 0,
        "high_count": 1
      },
      {
        "name": "node:22.14.0-alpine",
        "critical_count": 0,
        "high_count": 0
      }
    ]
  }
}